2025-07-08 15:54:43 | INFO | __main__ | Initializing Enhanced SQL Retriever Bot with LangChain...
2025-07-08 15:54:43 | INFO | __main__ | Connecting to database...
2025-07-08 15:54:43 | INFO | database.connection | Initializing sqlite database connection
2025-07-08 15:54:43 | INFO | database.connection | Successfully connected to sqlite database
2025-07-08 15:54:43 | INFO | __main__ | Initializing LangChain SQL client...
2025-07-08 15:54:43 | INFO | llm.langchain_client | Initializing LangChain SQL client...
2025-07-08 15:54:45 | WARNING | llm.langchain_client | VLLM not available: 1 validation error for VLLM
  Value error, Invalid repository ID or local directory specified: ''.
Please verify the following requirements:
1. Provide a valid Hugging Face repository ID.
2. Specify a local directory that contains a recognized configuration file.
   - For Hugging Face models: ensure the presence of a 'config.json'.
   - For Mistral models: ensure the presence of a 'params.json'.
3. For GGUF: pass the local path of the GGUF checkpoint.
   Loading GGUF from a remote repo directly is not yet supported.
 [type=value_error, input_value=ArgsKwargs((), {'model': ...attention_dtype': None}), input_type=ArgsKwargs]
    For further information visit https://errors.pydantic.dev/2.11/v/value_error, using fallback
2025-07-08 15:54:45 | INFO | llm.langchain_client | SQL database connection initialized
2025-07-08 15:54:45 | INFO | llm.langchain_client | Memory initialized: conversation_buffer_window
2025-07-08 15:54:45 | INFO | llm.langchain_client | SQL agent and toolkit initialized
2025-07-08 15:54:45 | INFO | llm.langchain_client | LangChain SQL client initialized successfully!
2025-07-08 15:54:45 | INFO | __main__ | LangChain client initialized successfully!
2025-07-08 15:54:45 | INFO | __main__ | Initializing few-shot prompt manager...
2025-07-08 15:54:45 | INFO | __main__ | Few-shot prompt manager initialized!
2025-07-08 15:54:45 | INFO | __main__ | Initializing VLLM client as fallback...
2025-07-08 15:54:45 | INFO | llm.vllm_client | VLLM server not available: HTTPConnectionPool(host='localhost', port=8000): Max retries exceeded with url: /health (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f8aaae56db0>: Failed to establish a new connection: [Errno 111] Connection refused'))
2025-07-08 15:54:45 | INFO | llm.vllm_client | VLLM server not available, using local transformers with CPU
2025-07-08 15:54:45 | INFO | llm.vllm_client | Loading meta-llama/Llama-3.2-3B-Instruct locally for CPU inference...
2025-07-08 15:54:56 | INFO | llm.vllm_client | Local model loaded successfully!
2025-07-08 15:54:56 | INFO | __main__ | Initializing RAG client...
2025-07-08 15:54:56 | INFO | llm.rag_client | Initializing RAG vector store...
2025-07-08 15:54:56 | INFO | llm.rag_client | Loading embedding model: all-MiniLM-L6-v2
2025-07-08 15:56:58 | INFO | llm.rag_client | Initializing ChromaDB...
2025-07-08 15:56:59 | INFO | llm.rag_client | Created new collection: sql_examples
2025-07-08 15:56:59 | INFO | llm.rag_client | Created new FAISS index with dimension 384
2025-07-08 15:56:59 | INFO | llm.rag_client | RAG vector store initialized successfully!
2025-07-08 15:56:59 | INFO | llm.rag_client | Loading default SQL examples...
2025-07-08 15:56:59 | INFO | llm.rag_client | Loaded 7 default examples
2025-07-08 15:56:59 | INFO | __main__ | RAG client initialized successfully!
2025-07-08 15:56:59 | INFO | __main__ | Enhanced SQL Retriever Bot initialized successfully!
2025-07-08 16:02:10 | INFO | __main__ | Processing query with enhanced methods: show me all artists...
2025-07-08 16:02:10 | INFO | __main__ | Processing with RAG...
2025-07-08 16:02:10 | INFO | llm.rag_client | Generated SQL using RAG: SELECT * FROM Artist;...
2025-07-08 16:02:10 | INFO | llm.rag_client | Learned new example: show me all artists...
2025-07-08 16:02:26 | INFO | __main__ | Processing query with enhanced methods: how many tracks are there...
2025-07-08 16:02:26 | INFO | __main__ | Processing with RAG...
2025-07-08 16:02:26 | INFO | llm.rag_client | Generated SQL using RAG: SELECT COUNT(*) FROM Track;...
2025-07-08 16:02:26 | INFO | llm.rag_client | Learned new example: how many tracks are there...
2025-07-08 16:02:36 | INFO | __main__ | Processing query with enhanced methods: show me all artists...
2025-07-08 16:02:36 | INFO | __main__ | Processing with RAG...
2025-07-08 16:02:36 | INFO | llm.rag_client | Generated SQL using RAG: SELECT * FROM Artist;...
2025-07-08 16:02:36 | INFO | llm.rag_client | Learned new example: show me all artists...
2025-07-08 16:04:25 | INFO | __main__ | Processing query with enhanced methods: Show employees and their managers...
2025-07-08 16:04:25 | INFO | __main__ | Processing with RAG...
2025-07-08 16:04:25 | WARNING | llm.rag_client | No similar examples found for: Show employees and their managers
2025-07-08 16:04:45 | INFO | __main__ | Processing query with enhanced methods: Find customers who spent more than $40...
2025-07-08 16:04:45 | INFO | __main__ | Processing with RAG...
2025-07-08 16:04:45 | INFO | llm.rag_client | Generated SQL using RAG: SELECT Customer.FirstName, Customer.LastName, SUM(Invoice.Total) as TotalSpent FROM Customer JOIN In...
2025-07-08 16:04:45 | INFO | llm.rag_client | Learned new example: Find customers who spent more than $40...
2025-07-08 16:05:27 | INFO | __main__ | Processing query with enhanced methods: List invoices from 2009...
2025-07-08 16:05:27 | INFO | __main__ | Processing with RAG...
2025-07-08 16:05:27 | WARNING | llm.rag_client | No similar examples found for: List invoices from 2009
2025-07-08 16:05:53 | INFO | database.connection | Database connection closed
2025-07-08 16:05:53 | INFO | llm.langchain_client | LangChain SQL client closed
2025-07-08 16:05:53 | INFO | llm.vllm_client | Model resources cleaned up
2025-07-08 16:05:53 | INFO | __main__ | Enhanced SQL Retriever Bot closed
2025-07-08 16:14:20 | INFO | __main__ | Initializing Enhanced SQL Retriever Bot with LangChain...
2025-07-08 16:14:20 | INFO | __main__ | Connecting to database...
2025-07-08 16:14:20 | INFO | database.connection | Initializing sqlite database connection
2025-07-08 16:14:20 | INFO | database.connection | Successfully connected to sqlite database
2025-07-08 16:14:20 | INFO | __main__ | Initializing LangChain SQL client...
2025-07-08 16:14:20 | INFO | llm.langchain_client | Initializing LangChain SQL client...
2025-07-08 16:14:22 | WARNING | llm.langchain_client | VLLM not available: 1 validation error for VLLM
  Value error, Invalid repository ID or local directory specified: ''.
Please verify the following requirements:
1. Provide a valid Hugging Face repository ID.
2. Specify a local directory that contains a recognized configuration file.
   - For Hugging Face models: ensure the presence of a 'config.json'.
   - For Mistral models: ensure the presence of a 'params.json'.
3. For GGUF: pass the local path of the GGUF checkpoint.
   Loading GGUF from a remote repo directly is not yet supported.
 [type=value_error, input_value=ArgsKwargs((), {'model': ...attention_dtype': None}), input_type=ArgsKwargs]
    For further information visit https://errors.pydantic.dev/2.11/v/value_error, using fallback
2025-07-08 16:14:22 | INFO | llm.langchain_client | SQL database connection initialized
2025-07-08 16:14:22 | INFO | llm.langchain_client | Memory initialized: conversation_buffer_window
2025-07-08 16:14:22 | INFO | llm.langchain_client | SQL agent and toolkit initialized
2025-07-08 16:14:22 | INFO | llm.langchain_client | LangChain SQL client initialized successfully!
2025-07-08 16:14:22 | INFO | __main__ | LangChain client initialized successfully!
2025-07-08 16:14:22 | INFO | __main__ | Initializing few-shot prompt manager...
2025-07-08 16:14:22 | INFO | __main__ | Few-shot prompt manager initialized!
2025-07-08 16:14:22 | INFO | __main__ | Initializing VLLM client as fallback...
2025-07-08 16:14:22 | INFO | llm.vllm_client | VLLM server not available: HTTPConnectionPool(host='localhost', port=8000): Max retries exceeded with url: /health (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7fa2d4275ca0>: Failed to establish a new connection: [Errno 111] Connection refused'))
2025-07-08 16:14:22 | INFO | llm.vllm_client | VLLM server not available, using local transformers with CPU
2025-07-08 16:14:22 | INFO | llm.vllm_client | Loading meta-llama/Llama-3.2-3B-Instruct locally for CPU inference...
2025-07-08 16:14:32 | INFO | llm.vllm_client | Local model loaded successfully!
2025-07-08 16:14:32 | INFO | __main__ | Initializing RAG client...
2025-07-08 16:14:32 | INFO | llm.rag_client | Initializing RAG vector store...
2025-07-08 16:14:32 | INFO | llm.rag_client | Loading embedding model: all-MiniLM-L6-v2
2025-07-08 16:14:40 | INFO | llm.rag_client | Initializing ChromaDB...
2025-07-08 16:14:40 | INFO | llm.rag_client | Loaded existing collection: sql_examples
2025-07-08 16:14:40 | INFO | llm.rag_client | Created new FAISS index with dimension 384
2025-07-08 16:14:40 | INFO | llm.rag_client | RAG vector store initialized successfully!
2025-07-08 16:14:40 | INFO | llm.rag_client | Loading LLM model: unsloth/Llama-3.2-3B-Instruct
2025-07-08 16:20:40 | INFO | llm.rag_client | LLM initialized successfully
2025-07-08 16:20:40 | INFO | llm.rag_client | Loading default SQL examples...
2025-07-08 16:20:40 | INFO | llm.rag_client | Loaded 7 default examples
2025-07-08 16:20:40 | INFO | __main__ | RAG client initialized successfully!
2025-07-08 16:20:40 | INFO | __main__ | Enhanced SQL Retriever Bot initialized successfully!
2025-07-08 16:21:42 | INFO | __main__ | Processing query with enhanced methods: show me all artists...
2025-07-08 16:21:42 | INFO | __main__ | Processing with RAG...
2025-07-08 16:21:42 | ERROR | llm.rag_client | LLM SQL generation failed: name 'torch' is not defined
2025-07-08 16:21:42 | INFO | llm.rag_client | Generated SQL using RAG: SELECT * FROM Artist;...
2025-07-08 16:21:42 | INFO | llm.rag_client | Learned new example: show me all artists...
2025-07-08 16:21:55 | INFO | __main__ | Processing query with enhanced methods: find customers from canada...
2025-07-08 16:21:55 | INFO | __main__ | Processing with RAG...
2025-07-08 16:21:55 | ERROR | llm.rag_client | LLM SQL generation failed: name 'torch' is not defined
2025-07-08 16:21:55 | INFO | llm.rag_client | Generated SQL using RAG: SELECT * FROM Customer WHERE Country = 'USA';...
2025-07-08 16:21:55 | INFO | llm.rag_client | Learned new example: find customers from canada...
2025-07-08 16:22:05 | INFO | __main__ | Processing query with enhanced methods: find customers from canada...
2025-07-08 16:22:05 | INFO | __main__ | Processing with RAG...
2025-07-08 16:22:05 | ERROR | llm.rag_client | LLM SQL generation failed: name 'torch' is not defined
2025-07-08 16:22:05 | INFO | llm.rag_client | Generated SQL using RAG: SELECT * FROM Customer WHERE Country = 'USA';...
2025-07-08 16:22:05 | INFO | llm.rag_client | Learned new example: find customers from canada...
2025-07-08 16:22:20 | INFO | __main__ | Processing query with enhanced methods: which artist has the most albums?...
2025-07-08 16:22:20 | INFO | __main__ | Processing with RAG...
2025-07-08 16:22:20 | ERROR | llm.rag_client | LLM SQL generation failed: name 'torch' is not defined
2025-07-08 16:22:20 | INFO | llm.rag_client | Generated SQL using RAG: SELECT Artist.Name, Album.Title FROM Artist JOIN Album ON Artist.ArtistId = Album.ArtistId ORDER BY ...
2025-07-08 16:22:20 | INFO | llm.rag_client | Learned new example: which artist has the most albums?...
2025-07-08 16:24:43 | INFO | __main__ | Processing query with enhanced methods: find the most expensive track...
2025-07-08 16:24:43 | INFO | __main__ | Processing with RAG...
2025-07-08 16:24:43 | WARNING | llm.rag_client | No similar examples found for: find the most expensive track
2025-07-08 16:27:45 | INFO | __main__ | Processing query with enhanced methods: find the most expensive album...
2025-07-08 16:27:45 | INFO | __main__ | Processing with RAG...
2025-07-08 16:27:45 | ERROR | llm.rag_client | LLM SQL generation failed: name 'torch' is not defined
2025-07-08 16:27:45 | INFO | llm.rag_client | Generated SQL using RAG: SELECT Artist.Name, Album.Title FROM Artist JOIN Album ON Artist.ArtistId = Album.ArtistId ORDER BY ...
2025-07-08 16:27:45 | INFO | llm.rag_client | Learned new example: find the most expensive album...
2025-07-08 16:29:52 | INFO | database.connection | Database connection closed
2025-07-08 16:29:52 | INFO | llm.langchain_client | LangChain SQL client closed
2025-07-08 16:29:52 | INFO | llm.vllm_client | Model resources cleaned up
2025-07-08 16:29:52 | INFO | __main__ | Enhanced SQL Retriever Bot closed
2025-07-08 17:37:23 | INFO | __main__ | 🚀 Initializing CRM SQL Retriever Bot...
2025-07-08 17:37:23 | INFO | __main__ | 📊 Connecting to CRM database...
2025-07-08 17:37:23 | INFO | __main__ | ✅ Connected to CRM database: /home/risad/projects/sql_retriever/data/test_crm_v1.db
2025-07-08 17:37:23 | INFO | __main__ | 🎯 Initializing RAG client...
2025-07-08 17:37:39 | INFO | __main__ | ✅ RAG client initialized
2025-07-08 17:37:39 | INFO | __main__ | 
================================================================================
2025-07-08 17:37:39 | INFO | __main__ | 🎉 CRM SQL Retriever Bot - Successfully Initialized!
2025-07-08 17:37:39 | INFO | __main__ | ================================================================================
2025-07-08 17:37:39 | INFO | __main__ | 📊 Database: /home/risad/projects/sql_retriever/data/test_crm_v1.db
2025-07-08 17:37:39 | INFO | __main__ | 🎯 RAG Enabled: True
2025-07-08 17:37:39 | INFO | __main__ | 🛡️ Safety Checks: True
2025-07-08 17:37:39 | INFO | __main__ | 
📋 CRM Database Schema:
2025-07-08 17:37:39 | INFO | __main__ |    
2025-07-08 17:37:39 | INFO | __main__ |    This is a CRM (Customer Relationship Management) database for a company that sells products.
2025-07-08 17:37:39 | INFO | __main__ |    Key business entities:
2025-07-08 17:37:39 | INFO | __main__ |    - Customers: Companies/individuals who buy products
2025-07-08 17:37:39 | INFO | __main__ |    - Products: Items sold by the company, organized into product lines
2025-07-08 17:37:39 | INFO | __main__ |    - Orders: Purchase orders from customers
2025-07-08 17:37:39 | INFO | __main__ |    - Employees: Company staff who manage sales and operations
2025-07-08 17:37:39 | INFO | __main__ |    - Offices: Company locations where employees work
2025-07-08 17:37:39 | INFO | __main__ |    - Payments: Customer payments for orders
2025-07-08 17:37:39 | INFO | __main__ |    
2025-07-08 17:37:39 | INFO | __main__ |    ... (truncated)
2025-07-08 17:37:39 | INFO | __main__ | 
🚀 Ready to process queries!
2025-07-08 17:37:39 | INFO | __main__ | ================================================================================
2025-07-08 17:37:39 | INFO | __main__ | 
🔍 Processing Query #1: Show me all customers
2025-07-08 17:37:39 | INFO | __main__ | 🎯 Using RAG for SQL generation...
2025-07-08 17:37:39 | INFO | __main__ | 
🔍 Processing Query #2: Find customers from USA
2025-07-08 17:37:39 | INFO | __main__ | 🎯 Using RAG for SQL generation...
2025-07-08 17:37:39 | INFO | __main__ | 
🔍 Processing Query #3: List all products with their prices
2025-07-08 17:37:39 | INFO | __main__ | 🎯 Using RAG for SQL generation...
2025-07-08 17:37:39 | INFO | __main__ | 
🔍 Processing Query #4: Show employees and their managers
2025-07-08 17:37:39 | INFO | __main__ | 🎯 Using RAG for SQL generation...
2025-07-08 17:37:39 | INFO | __main__ | 
🔍 Processing Query #5: Find the most expensive product
2025-07-08 17:37:39 | INFO | __main__ | 🎯 Using RAG for SQL generation...
2025-07-08 17:37:39 | INFO | __main__ | 🧹 Cleanup completed
2025-07-08 17:40:59 | INFO | __main__ | 🚀 Initializing CRM SQL Retriever Bot...
2025-07-08 17:40:59 | INFO | __main__ | 📊 Connecting to CRM database...
2025-07-08 17:40:59 | INFO | __main__ | ✅ Connected to CRM database: /home/risad/projects/sql_retriever/data/test_crm_v1.db
2025-07-08 17:40:59 | INFO | __main__ | 🎯 Initializing RAG client...
2025-07-08 17:41:12 | INFO | __main__ | ✅ RAG client initialized
2025-07-08 17:41:12 | INFO | __main__ | 
================================================================================
2025-07-08 17:41:12 | INFO | __main__ | 🎉 CRM SQL Retriever Bot - Successfully Initialized!
2025-07-08 17:41:12 | INFO | __main__ | ================================================================================
2025-07-08 17:41:12 | INFO | __main__ | 📊 Database: /home/risad/projects/sql_retriever/data/test_crm_v1.db
2025-07-08 17:41:12 | INFO | __main__ | 🎯 RAG Enabled: True
2025-07-08 17:41:12 | INFO | __main__ | 🛡️ Safety Checks: True
2025-07-08 17:41:12 | INFO | __main__ | 
📋 CRM Database Schema:
2025-07-08 17:41:12 | INFO | __main__ |    
2025-07-08 17:41:12 | INFO | __main__ |    This is a CRM (Customer Relationship Management) database for a company that sells products.
2025-07-08 17:41:12 | INFO | __main__ |    Key business entities:
2025-07-08 17:41:12 | INFO | __main__ |    - Customers: Companies/individuals who buy products
2025-07-08 17:41:12 | INFO | __main__ |    - Products: Items sold by the company, organized into product lines
2025-07-08 17:41:12 | INFO | __main__ |    - Orders: Purchase orders from customers
2025-07-08 17:41:12 | INFO | __main__ |    - Employees: Company staff who manage sales and operations
2025-07-08 17:41:12 | INFO | __main__ |    - Offices: Company locations where employees work
2025-07-08 17:41:12 | INFO | __main__ |    - Payments: Customer payments for orders
2025-07-08 17:41:12 | INFO | __main__ |    
2025-07-08 17:41:12 | INFO | __main__ |    ... (truncated)
2025-07-08 17:41:12 | INFO | __main__ | 
🚀 Ready to process queries!
2025-07-08 17:41:12 | INFO | __main__ | ================================================================================
2025-07-08 17:41:12 | INFO | __main__ | 
🔍 Processing Query #1: Show me all customers
2025-07-08 17:41:12 | INFO | __main__ | 🎯 Using RAG for SQL generation...
2025-07-08 17:41:21 | INFO | __main__ | 📊 Executing SQL: SELECT customerNumber, customerName, city, country FROM customers ORDER BY customerName;
2025-07-08 17:41:21 | INFO | __main__ | ✅ Query completed: 14 results in 9.060s
2025-07-08 17:41:21 | ERROR | __main__ | ❌ Application error: 'ResponseFormatter' object has no attribute 'format_table_data'
2025-07-08 17:42:42 | INFO | __main__ | 🚀 Initializing CRM SQL Retriever Bot...
2025-07-08 17:42:42 | INFO | __main__ | 📊 Connecting to CRM database...
2025-07-08 17:42:42 | INFO | __main__ | ✅ Connected to CRM database: /home/risad/projects/sql_retriever/data/test_crm_v1.db
2025-07-08 17:42:42 | INFO | __main__ | 🎯 Initializing RAG client...
2025-07-08 17:42:55 | INFO | __main__ | ✅ RAG client initialized
2025-07-08 17:42:55 | INFO | __main__ | 
================================================================================
2025-07-08 17:42:55 | INFO | __main__ | 🎉 CRM SQL Retriever Bot - Successfully Initialized!
2025-07-08 17:42:55 | INFO | __main__ | ================================================================================
2025-07-08 17:42:55 | INFO | __main__ | 📊 Database: /home/risad/projects/sql_retriever/data/test_crm_v1.db
2025-07-08 17:42:55 | INFO | __main__ | 🎯 RAG Enabled: True
2025-07-08 17:42:55 | INFO | __main__ | 🛡️ Safety Checks: True
2025-07-08 17:42:55 | INFO | __main__ | 
📋 CRM Database Schema:
2025-07-08 17:42:55 | INFO | __main__ |    
2025-07-08 17:42:55 | INFO | __main__ |    This is a CRM (Customer Relationship Management) database for a company that sells products.
2025-07-08 17:42:55 | INFO | __main__ |    Key business entities:
2025-07-08 17:42:55 | INFO | __main__ |    - Customers: Companies/individuals who buy products
2025-07-08 17:42:55 | INFO | __main__ |    - Products: Items sold by the company, organized into product lines
2025-07-08 17:42:55 | INFO | __main__ |    - Orders: Purchase orders from customers
2025-07-08 17:42:55 | INFO | __main__ |    - Employees: Company staff who manage sales and operations
2025-07-08 17:42:55 | INFO | __main__ |    - Offices: Company locations where employees work
2025-07-08 17:42:55 | INFO | __main__ |    - Payments: Customer payments for orders
2025-07-08 17:42:55 | INFO | __main__ |    
2025-07-08 17:42:55 | INFO | __main__ |    ... (truncated)
2025-07-08 17:42:55 | INFO | __main__ | 
🚀 Ready to process queries!
2025-07-08 17:42:55 | INFO | __main__ | ================================================================================
2025-07-08 17:42:55 | INFO | __main__ | 
🔍 Processing Query #1: Show me all customers
2025-07-08 17:42:55 | INFO | __main__ | 🎯 Using RAG for SQL generation...
2025-07-08 17:43:05 | INFO | __main__ | 📊 Executing SQL: SELECT customerNumber, customerName, city, country FROM customers ORDER BY customerName;
2025-07-08 17:43:05 | INFO | __main__ | ✅ Query completed: 14 results in 9.951s
2025-07-08 17:43:05 | INFO | __main__ | 
🔍 Processing Query #2: Find customers from USA
2025-07-08 17:43:05 | INFO | __main__ | 🎯 Using RAG for SQL generation...
2025-07-08 17:43:15 | INFO | __main__ | 📊 Executing SQL: SELECT customerNumber, customerName, city, state FROM customers WHERE country = 'USA';
2025-07-08 17:43:15 | INFO | __main__ | ✅ Query completed: 4 results in 9.262s
2025-07-08 17:43:15 | INFO | __main__ | 
🔍 Processing Query #3: List all products with their prices
2025-07-08 17:43:15 | INFO | __main__ | 🎯 Using RAG for SQL generation...
2025-07-08 17:43:22 | INFO | __main__ | 📊 Executing SQL: SELECT productCode, productName, buyPrice, MSRP FROM products;
2025-07-08 17:43:22 | INFO | __main__ | ✅ Query completed: 5 results in 6.886s
2025-07-08 17:43:22 | INFO | __main__ | 
🔍 Processing Query #4: Show employees and their managers
2025-07-08 17:43:22 | INFO | __main__ | 🎯 Using RAG for SQL generation...
2025-07-08 17:43:46 | INFO | __main__ | 📊 Executing SQL: SELECT e.employeeNumber, e.firstName, e.lastName, e.jobTitle, m.firstName as managerFirstName, m.lastName as managerLastName FROM employees e LEFT JOIN employees m ON e.reportsTo = m.employeeNumber ORDER BY e.lastName;
2025-07-08 17:43:46 | INFO | __main__ | ✅ Query completed: 23 results in 24.642s
2025-07-08 17:43:46 | INFO | __main__ | 
🔍 Processing Query #5: Find the most expensive product
2025-07-08 17:43:46 | INFO | __main__ | 🎯 Using RAG for SQL generation...
2025-07-08 17:43:58 | INFO | __main__ | 📊 Executing SQL: SELECT MAX(MSRP) FROM products);
2025-07-08 17:43:58 | ERROR | __main__ | ❌ Query processing failed: near ")": syntax error
2025-07-08 17:43:58 | INFO | __main__ | 🧹 Cleanup completed
2025-07-08 17:45:47 | INFO | __main__ | 🚀 Initializing CRM SQL Retriever Bot...
2025-07-08 17:45:47 | INFO | __main__ | 📊 Connecting to CRM database...
2025-07-08 17:45:47 | INFO | __main__ | ✅ Connected to CRM database: /home/risad/projects/sql_retriever/data/test_crm_v1.db
2025-07-08 17:45:47 | INFO | __main__ | 🎯 Initializing RAG client...
2025-07-08 17:45:58 | INFO | __main__ | ✅ RAG client initialized
2025-07-08 17:45:58 | INFO | __main__ | 
================================================================================
2025-07-08 17:45:58 | INFO | __main__ | 🎉 CRM SQL Retriever Bot - Successfully Initialized!
2025-07-08 17:45:58 | INFO | __main__ | ================================================================================
2025-07-08 17:45:58 | INFO | __main__ | 📊 Database: /home/risad/projects/sql_retriever/data/test_crm_v1.db
2025-07-08 17:45:58 | INFO | __main__ | 🎯 RAG Enabled: True
2025-07-08 17:45:58 | INFO | __main__ | 🛡️ Safety Checks: True
2025-07-08 17:45:58 | INFO | __main__ | 
📋 CRM Database Schema:
2025-07-08 17:45:58 | INFO | __main__ |    
2025-07-08 17:45:58 | INFO | __main__ |    This is a CRM (Customer Relationship Management) database for a company that sells products.
2025-07-08 17:45:58 | INFO | __main__ |    Key business entities:
2025-07-08 17:45:58 | INFO | __main__ |    - Customers: Companies/individuals who buy products
2025-07-08 17:45:58 | INFO | __main__ |    - Products: Items sold by the company, organized into product lines
2025-07-08 17:45:58 | INFO | __main__ |    - Orders: Purchase orders from customers
2025-07-08 17:45:58 | INFO | __main__ |    - Employees: Company staff who manage sales and operations
2025-07-08 17:45:58 | INFO | __main__ |    - Offices: Company locations where employees work
2025-07-08 17:45:58 | INFO | __main__ |    - Payments: Customer payments for orders
2025-07-08 17:45:58 | INFO | __main__ |    
2025-07-08 17:45:58 | INFO | __main__ |    ... (truncated)
2025-07-08 17:45:58 | INFO | __main__ | 
🚀 Ready to process queries!
2025-07-08 17:45:58 | INFO | __main__ | ================================================================================
2025-07-08 17:46:41 | INFO | __main__ | 
🔍 Processing Query #1: show me all customers
2025-07-08 17:46:41 | INFO | __main__ | 🎯 Using RAG for SQL generation...
2025-07-08 17:46:48 | INFO | __main__ | 📊 Executing SQL: SELECT customerNumber, customerName, city, country FROM customers ORDER BY customerName;
2025-07-08 17:46:48 | INFO | __main__ | ✅ Query completed: 14 results in 7.667s
2025-07-08 17:47:08 | INFO | __main__ | 
🔍 Processing Query #2: find customers from USA
2025-07-08 17:47:08 | INFO | __main__ | 🎯 Using RAG for SQL generation...
2025-07-08 17:47:16 | INFO | __main__ | 📊 Executing SQL: SELECT customerNumber, customerName, city, state FROM customers WHERE country = 'USA';
2025-07-08 17:47:16 | INFO | __main__ | ✅ Query completed: 4 results in 7.797s
2025-07-08 17:47:32 | INFO | __main__ | 
🔍 Processing Query #3: count number of customers
2025-07-08 17:47:32 | INFO | __main__ | 🎯 Using RAG for SQL generation...
2025-07-08 17:49:27 | INFO | __main__ | 
🔍 Processing Query #4: how many unique states are there from USA in customer table
2025-07-08 17:49:27 | INFO | __main__ | 🎯 Using RAG for SQL generation...
2025-07-08 17:49:29 | INFO | __main__ | 🧹 Cleanup completed
2025-07-08 17:54:44 | INFO | __main__ | 🚀 Initializing CRM SQL Retriever Bot...
2025-07-08 17:54:44 | INFO | __main__ | 📊 Connecting to CRM database...
2025-07-08 17:54:44 | INFO | __main__ | ✅ Connected to CRM database: /home/risad/projects/sql_retriever/data/test_crm_v1.db
2025-07-08 17:54:44 | INFO | __main__ | 🎯 Initializing RAG client...
2025-07-08 17:54:57 | INFO | __main__ | ✅ RAG client initialized
2025-07-08 17:54:57 | INFO | __main__ | 
================================================================================
2025-07-08 17:54:57 | INFO | __main__ | 🎉 CRM SQL Retriever Bot - Successfully Initialized!
2025-07-08 17:54:57 | INFO | __main__ | ================================================================================
2025-07-08 17:54:57 | INFO | __main__ | 📊 Database: /home/risad/projects/sql_retriever/data/test_crm_v1.db
2025-07-08 17:54:57 | INFO | __main__ | 🎯 RAG Enabled: True
2025-07-08 17:54:57 | INFO | __main__ | 🛡️ Safety Checks: True
2025-07-08 17:54:57 | INFO | __main__ | 
📋 CRM Database Schema:
2025-07-08 17:54:57 | INFO | __main__ |    
2025-07-08 17:54:57 | INFO | __main__ |    This is a CRM (Customer Relationship Management) database for a company that sells products.
2025-07-08 17:54:57 | INFO | __main__ |    Key business entities:
2025-07-08 17:54:57 | INFO | __main__ |    - Customers: Companies/individuals who buy products
2025-07-08 17:54:57 | INFO | __main__ |    - Products: Items sold by the company, organized into product lines
2025-07-08 17:54:57 | INFO | __main__ |    - Orders: Purchase orders from customers
2025-07-08 17:54:57 | INFO | __main__ |    - Employees: Company staff who manage sales and operations
2025-07-08 17:54:57 | INFO | __main__ |    - Offices: Company locations where employees work
2025-07-08 17:54:57 | INFO | __main__ |    - Payments: Customer payments for orders
2025-07-08 17:54:57 | INFO | __main__ |    
2025-07-08 17:54:57 | INFO | __main__ |    ... (truncated)
2025-07-08 17:54:57 | INFO | __main__ | 
🚀 Ready to process queries!
2025-07-08 17:54:57 | INFO | __main__ | ================================================================================
2025-07-08 17:56:00 | INFO | __main__ | 
🔍 Processing Query #1: count numbers of customers
2025-07-08 17:56:00 | INFO | __main__ | 🎯 Using RAG for SQL generation...
2025-07-08 17:56:05 | INFO | __main__ | 📊 Executing SQL: SELECT COUNT(*) as total_customers FROM customers;
2025-07-08 17:56:05 | INFO | __main__ | ✅ Query completed: 1 results in 5.419s
2025-07-08 17:56:33 | INFO | __main__ | 
🔍 Processing Query #2: average product price
2025-07-08 17:56:33 | INFO | __main__ | 🎯 Using RAG for SQL generation...
2025-07-08 17:56:39 | INFO | __main__ | 📊 Executing SQL: SELECT AVG(MSRP) as average_price FROM products;
2025-07-08 17:56:39 | INFO | __main__ | ✅ Query completed: 1 results in 5.740s
2025-07-08 17:57:21 | INFO | __main__ | 🧹 Cleanup completed
2025-07-09 11:11:23 | INFO | __main__ | 🚀 Initializing CRM SQL Retriever Bot...
2025-07-09 11:11:23 | INFO | __main__ | 📊 Connecting to CRM database...
2025-07-09 11:11:23 | INFO | __main__ | ✅ Connected to CRM database: /home/risad/projects/sql_retriever/data/test_crm_v1.db
2025-07-09 11:11:23 | INFO | __main__ | 🎯 Initializing RAG client...
2025-07-09 11:11:34 | INFO | __main__ | ✅ RAG client initialized
2025-07-09 11:11:34 | INFO | __main__ | 
================================================================================
2025-07-09 11:11:34 | INFO | __main__ | 🎉 CRM SQL Retriever Bot - Successfully Initialized!
2025-07-09 11:11:34 | INFO | __main__ | ================================================================================
2025-07-09 11:11:34 | INFO | __main__ | 📊 Database: /home/risad/projects/sql_retriever/data/test_crm_v1.db
2025-07-09 11:11:34 | INFO | __main__ | 🎯 RAG Enabled: True
2025-07-09 11:11:34 | INFO | __main__ | 🛡️ Safety Checks: True
2025-07-09 11:11:34 | INFO | __main__ | 
📋 CRM Database Schema:
2025-07-09 11:11:34 | INFO | __main__ |    
2025-07-09 11:11:34 | INFO | __main__ |    This is a CRM (Customer Relationship Management) database for a company that sells products.
2025-07-09 11:11:34 | INFO | __main__ |    Key business entities:
2025-07-09 11:11:34 | INFO | __main__ |    - Customers: Companies/individuals who buy products
2025-07-09 11:11:34 | INFO | __main__ |    - Products: Items sold by the company, organized into product lines
2025-07-09 11:11:34 | INFO | __main__ |    - Orders: Purchase orders from customers
2025-07-09 11:11:34 | INFO | __main__ |    - Employees: Company staff who manage sales and operations
2025-07-09 11:11:34 | INFO | __main__ |    - Offices: Company locations where employees work
2025-07-09 11:11:34 | INFO | __main__ |    - Payments: Customer payments for orders
2025-07-09 11:11:34 | INFO | __main__ |    
2025-07-09 11:11:34 | INFO | __main__ |    ... (truncated)
2025-07-09 11:11:34 | INFO | __main__ | 
🚀 Ready to process queries!
2025-07-09 11:11:34 | INFO | __main__ | ================================================================================
2025-07-09 11:11:34 | INFO | __main__ | 
🔍 Processing Query #1: Show me all customers
2025-07-09 11:11:34 | INFO | __main__ | 🎯 Using RAG for SQL generation...
2025-07-09 11:11:45 | INFO | __main__ | 📊 Executing SQL: SELECT customerNumber, customerName, city, country FROM customers ORDER BY customerName;
2025-07-09 11:11:45 | INFO | __main__ | ✅ Query completed: 14 results in 10.487s
2025-07-09 11:11:45 | INFO | __main__ | 
🔍 Processing Query #2: Find customers from USA
2025-07-09 11:11:45 | INFO | __main__ | 🎯 Using RAG for SQL generation...
2025-07-09 11:11:53 | INFO | __main__ | 📊 Executing SQL: SELECT customerNumber, customerName, city, state FROM customers WHERE country = 'USA';
2025-07-09 11:11:53 | INFO | __main__ | ✅ Query completed: 4 results in 8.225s
2025-07-09 11:11:53 | INFO | __main__ | 
🔍 Processing Query #3: List all products with their prices
2025-07-09 11:11:53 | INFO | __main__ | 🎯 Using RAG for SQL generation...
2025-07-09 11:11:59 | INFO | __main__ | 📊 Executing SQL: SELECT productCode, productName, buyPrice, MSRP FROM products;
2025-07-09 11:11:59 | INFO | __main__ | ✅ Query completed: 5 results in 6.104s
2025-07-09 11:11:59 | INFO | __main__ | 
🔍 Processing Query #4: Show employees and their managers
2025-07-09 11:11:59 | INFO | __main__ | 🎯 Using RAG for SQL generation...
2025-07-09 11:12:21 | INFO | __main__ | 📊 Executing SQL: SELECT e.employeeNumber, e.firstName, e.lastName, e.jobTitle, m.firstName as managerFirstName, m.lastName as managerLastName FROM employees e LEFT JOIN employees m ON e.reportsTo = m.employeeNumber ORDER BY e.lastName;
2025-07-09 11:12:21 | INFO | __main__ | ✅ Query completed: 23 results in 22.022s
2025-07-09 11:12:21 | INFO | __main__ | 
🔍 Processing Query #5: Find the most expensive product
2025-07-09 11:12:21 | INFO | __main__ | 🎯 Using RAG for SQL generation...
2025-07-09 11:12:32 | INFO | __main__ | 📊 Executing SQL: SELECT MAX(MSRP) FROM products);
2025-07-09 11:12:32 | ERROR | __main__ | ❌ Query processing failed: near ")": syntax error
2025-07-09 11:12:32 | INFO | __main__ | 🧹 Cleanup completed
2025-07-09 11:15:19 | INFO | __main__ | 🚀 Initializing CRM SQL Retriever Bot...
2025-07-09 11:15:19 | INFO | __main__ | 📊 Connecting to CRM database...
2025-07-09 11:15:19 | INFO | __main__ | ✅ Connected to CRM database: /home/risad/projects/sql_retriever/data/test_crm_v1.db
2025-07-09 11:15:19 | INFO | __main__ | 🎯 Initializing RAG client...
2025-07-09 11:15:29 | INFO | __main__ | ✅ RAG client initialized
2025-07-09 11:15:29 | INFO | __main__ | 
================================================================================
2025-07-09 11:15:29 | INFO | __main__ | 🎉 CRM SQL Retriever Bot - Successfully Initialized!
2025-07-09 11:15:29 | INFO | __main__ | ================================================================================
2025-07-09 11:15:29 | INFO | __main__ | 📊 Database: /home/risad/projects/sql_retriever/data/test_crm_v1.db
2025-07-09 11:15:29 | INFO | __main__ | 🎯 RAG Enabled: True
2025-07-09 11:15:29 | INFO | __main__ | 🛡️ Safety Checks: True
2025-07-09 11:15:29 | INFO | __main__ | 
📋 CRM Database Schema:
2025-07-09 11:15:29 | INFO | __main__ |    
2025-07-09 11:15:29 | INFO | __main__ |    This is a CRM (Customer Relationship Management) database for a company that sells products.
2025-07-09 11:15:29 | INFO | __main__ |    Key business entities:
2025-07-09 11:15:29 | INFO | __main__ |    - Customers: Companies/individuals who buy products
2025-07-09 11:15:29 | INFO | __main__ |    - Products: Items sold by the company, organized into product lines
2025-07-09 11:15:29 | INFO | __main__ |    - Orders: Purchase orders from customers
2025-07-09 11:15:29 | INFO | __main__ |    - Employees: Company staff who manage sales and operations
2025-07-09 11:15:29 | INFO | __main__ |    - Offices: Company locations where employees work
2025-07-09 11:15:29 | INFO | __main__ |    - Payments: Customer payments for orders
2025-07-09 11:15:29 | INFO | __main__ |    
2025-07-09 11:15:29 | INFO | __main__ |    ... (truncated)
2025-07-09 11:15:29 | INFO | __main__ | 
🚀 Ready to process queries!
2025-07-09 11:15:29 | INFO | __main__ | ================================================================================
2025-07-09 11:17:21 | INFO | __main__ | 
🔍 Processing Query #1: whats the total revenue generated this year?
2025-07-09 11:17:21 | INFO | __main__ | 🎯 Using RAG for SQL generation...
2025-07-09 11:17:47 | INFO | __main__ | 
🔍 Processing Query #2: which customer has the highest lifetime value?
2025-07-09 11:17:47 | INFO | __main__ | 🎯 Using RAG for SQL generation...
2025-07-09 11:17:58 | INFO | __main__ | 
🔍 Processing Query #3: show me top 3 product ines by revenue
2025-07-09 11:17:58 | INFO | __main__ | 🎯 Using RAG for SQL generation...
2025-07-09 11:18:13 | INFO | __main__ | 
🔍 Processing Query #4: whats our customer retention rate
2025-07-09 11:18:13 | INFO | __main__ | 🎯 Using RAG for SQL generation...
2025-07-09 11:18:30 | INFO | __main__ | 
🔍 Processing Query #5: which product categories are most popular?
2025-07-09 11:18:30 | INFO | __main__ | 🎯 Using RAG for SQL generation...
2025-07-09 11:18:40 | INFO | __main__ | 
🔍 Processing Query #6: show monthly revenue trends
2025-07-09 11:18:40 | INFO | __main__ | 🎯 Using RAG for SQL generation...
2025-07-09 11:19:55 | INFO | __main__ | 🧹 Cleanup completed
2025-07-09 11:29:37 | INFO | __main__ | 🚀 Initializing CRM SQL Retriever Bot...
2025-07-09 11:29:37 | INFO | __main__ | 📊 Connecting to CRM database...
2025-07-09 11:29:37 | INFO | __main__ | ✅ Connected to CRM database: /home/risad/projects/sql_retriever/data/test_crm_v1.db
2025-07-09 11:29:37 | INFO | __main__ | 🎯 Initializing RAG client...
2025-07-09 11:29:49 | INFO | __main__ | ✅ RAG client initialized
2025-07-09 11:29:49 | INFO | __main__ | 
================================================================================
2025-07-09 11:29:49 | INFO | __main__ | 🎉 CRM SQL Retriever Bot - Successfully Initialized!
2025-07-09 11:29:49 | INFO | __main__ | ================================================================================
2025-07-09 11:29:49 | INFO | __main__ | 📊 Database: /home/risad/projects/sql_retriever/data/test_crm_v1.db
2025-07-09 11:29:49 | INFO | __main__ | 🎯 RAG Enabled: True
2025-07-09 11:29:49 | INFO | __main__ | 🛡️ Safety Checks: True
2025-07-09 11:29:49 | INFO | __main__ | 
📋 CRM Database Schema:
2025-07-09 11:29:49 | INFO | __main__ |    
2025-07-09 11:29:49 | INFO | __main__ |    This is a CRM (Customer Relationship Management) database for a company that sells products.
2025-07-09 11:29:49 | INFO | __main__ |    Key business entities:
2025-07-09 11:29:49 | INFO | __main__ |    - Customers: Companies/individuals who buy products
2025-07-09 11:29:49 | INFO | __main__ |    - Products: Items sold by the company, organized into product lines
2025-07-09 11:29:49 | INFO | __main__ |    - Orders: Purchase orders from customers
2025-07-09 11:29:49 | INFO | __main__ |    - Employees: Company staff who manage sales and operations
2025-07-09 11:29:49 | INFO | __main__ |    - Offices: Company locations where employees work
2025-07-09 11:29:49 | INFO | __main__ |    - Payments: Customer payments for orders
2025-07-09 11:29:49 | INFO | __main__ |    
2025-07-09 11:29:49 | INFO | __main__ |    ... (truncated)
2025-07-09 11:29:49 | INFO | __main__ | 
🚀 Ready to process queries!
2025-07-09 11:29:49 | INFO | __main__ | ================================================================================
2025-07-09 11:50:02 | INFO | __main__ | 
🔍 Processing Query #1: what is the total revenue generated this year?
2025-07-09 11:50:02 | INFO | __main__ | 🎯 Using RAG for SQL generation...
2025-07-09 11:50:32 | INFO | __main__ | 📊 Executing SQL: SELECT SUM(T1.MSRP * T2.quantityOrdered) AS totalRevenue FROM PRODUCTS AS T1 INNER JOIN ORDERDETAILS AS T2 ON T1.productCode = T2.productCode WHERE STRFTIME('%Y', T2.orderDate) = '2023';
2025-07-09 11:50:32 | ERROR | __main__ | ❌ Query processing failed: no such column: T2.orderDate
2025-07-09 11:50:54 | INFO | __main__ | 
🔍 Processing Query #2: show monthly revenue trends
2025-07-09 11:50:54 | INFO | __main__ | 🎯 Using RAG for SQL generation...
2025-07-09 11:51:23 | INFO | __main__ | 📊 Executing SQL: SELECT EXTRACT(MONTH FROM o.orderDate) AS month, SUM(od.quantityOrdered * od.priceEach) AS revenue FROM ORDERS o JOIN ORDERDETAILS od ON o.orderNumber = od.orderNumber GROUP BY EXTRACT(MONTH FROM o.orderDate);
2025-07-09 11:51:23 | ERROR | __main__ | ❌ Query processing failed: near "FROM": syntax error
2025-07-09 11:52:43 | INFO | __main__ | 
🔍 Processing Query #3: What's the average order value per customer?
2025-07-09 11:52:43 | INFO | __main__ | 🎯 Using RAG for SQL generation...
2025-07-09 11:53:10 | INFO | __main__ | 📊 Executing SQL: SELECT c.customerName, AVG(od.quantityOrdered * od.priceEach) as avg_order_value FROM customers c JOIN orders o ON c.customerNumber = o.customerNumber JOIN orderdetails od ON o.orderNumber = od.orderNumber GROUP BY c.customerNumber, c.customerName ORDER BY avg_order_value DESC;
2025-07-09 11:53:10 | INFO | __main__ | ✅ Query completed: 3 results in 27.137s
2025-07-09 11:53:48 | INFO | __main__ | 
🔍 Processing Query #4: Show me the top 3 product lines by revenue
2025-07-09 11:53:48 | INFO | __main__ | 🎯 Using RAG for SQL generation...
2025-07-09 11:54:11 | INFO | __main__ | 📊 Executing SQL: SELECT productLine, SUM(OD.quantityOrdered * PS.priceEach) AS revenue FROM ORDERDETAILS OD INNER JOIN PRODUCTS PS ON OD.productCode = PS.productCode GROUP BY productLine ORDER BY revenue DESC LIMIT 3 ;
2025-07-09 11:54:11 | ERROR | __main__ | ❌ Query processing failed: no such column: PS.priceEach
2025-07-09 11:54:48 | INFO | __main__ | 
🔍 Processing Query #5: Show employee performance by sales volume
2025-07-09 11:54:48 | INFO | __main__ | 🎯 Using RAG for SQL generation...
2025-07-09 11:55:16 | INFO | __main__ | 📊 Executing SQL: SELECT E.firstName, E.lastName, SUM(O.orderNumber) AS totalOrders, SUM(OD.quantityOrdered) AS totalSalesVolume FROM Employees E JOIN Orders O ON E.employeeNumber = O.salesRepEmployeeNumber JOIN ORDERDETAILS OD ON O.orderNumber = OD.orderNumber GROUP BY E.employeeNumber;
2025-07-09 11:55:16 | ERROR | __main__ | ❌ Query processing failed: no such column: O.salesRepEmployeeNumber
2025-07-09 11:55:22 | INFO | __main__ | 🧹 Cleanup completed
2025-07-09 12:03:31 | INFO | __main__ | 🚀 Initializing CRM SQL Retriever Bot...
2025-07-09 12:03:31 | INFO | __main__ | 📊 Connecting to CRM database...
2025-07-09 12:03:31 | INFO | __main__ | ✅ Connected to CRM database: /home/risad/projects/sql_retriever/data/test_crm_v1.db
2025-07-09 12:03:31 | INFO | __main__ | 🎯 Initializing RAG client...
2025-07-09 12:03:43 | INFO | __main__ | ✅ RAG client initialized
2025-07-09 12:03:43 | INFO | __main__ | 
================================================================================
2025-07-09 12:03:43 | INFO | __main__ | 🎉 CRM SQL Retriever Bot - Successfully Initialized!
2025-07-09 12:03:43 | INFO | __main__ | ================================================================================
2025-07-09 12:03:43 | INFO | __main__ | 📊 Database: /home/risad/projects/sql_retriever/data/test_crm_v1.db
2025-07-09 12:03:43 | INFO | __main__ | 🎯 RAG Enabled: True
2025-07-09 12:03:43 | INFO | __main__ | 🛡️ Safety Checks: True
2025-07-09 12:03:43 | INFO | __main__ | 
📋 CRM Database Schema:
2025-07-09 12:03:43 | INFO | __main__ |    
2025-07-09 12:03:43 | INFO | __main__ |    This is a CRM (Customer Relationship Management) database for a company that sells products.
2025-07-09 12:03:43 | INFO | __main__ |    Key business entities:
2025-07-09 12:03:43 | INFO | __main__ |    - Customers: Companies/individuals who buy products
2025-07-09 12:03:43 | INFO | __main__ |    - Products: Items sold by the company, organized into product lines
2025-07-09 12:03:43 | INFO | __main__ |    - Orders: Purchase orders from customers
2025-07-09 12:03:43 | INFO | __main__ |    - Employees: Company staff who manage sales and operations
2025-07-09 12:03:43 | INFO | __main__ |    - Offices: Company locations where employees work
2025-07-09 12:03:43 | INFO | __main__ |    - Payments: Customer payments for orders
2025-07-09 12:03:43 | INFO | __main__ |    
2025-07-09 12:03:43 | INFO | __main__ |    ... (truncated)
2025-07-09 12:03:43 | INFO | __main__ | 
🚀 Ready to process queries!
2025-07-09 12:03:43 | INFO | __main__ | ================================================================================
2025-07-09 12:05:41 | INFO | __main__ | 
🔍 Processing Query #1: what's the total revenue generated this year?
2025-07-09 12:05:41 | INFO | __main__ | 🎯 Using RAG for SQL generation...
2025-07-09 12:06:03 | INFO | __main__ | 📊 Executing SQL: SELECT SUM(od.quantityOrdered * od.priceEach) AS totalRevenue FROM orderdetails od JOIN orders o ON od.orderNumber = o.orderNumber WHERE STRFTIME('%Y', o.orderDate) = STRFTIME('%Y');
2025-07-09 12:06:03 | INFO | __main__ | ✅ Query completed: 1 results in 22.510s
2025-07-09 12:07:32 | INFO | __main__ | 
🔍 Processing Query #2: whats the total revenue generated by year?
2025-07-09 12:07:32 | INFO | __main__ | 🎯 Using RAG for SQL generation...
2025-07-09 12:07:54 | INFO | __main__ | 📊 Executing SQL: SELECT SUM(od.quantityOrdered * od.priceEach) AS totalRevenue FROM orderdetails od JOIN orders o ON od.orderNumber = o.orderNumber WHERE STRFTIME('%Y', o.orderDate) = STRFTIME('%Y');
2025-07-09 12:07:54 | INFO | __main__ | ✅ Query completed: 1 results in 21.873s
2025-07-09 12:08:12 | INFO | __main__ | 
🔍 Processing Query #3: what's the total revenue generated in 2005?
2025-07-09 12:08:12 | INFO | __main__ | 🎯 Using RAG for SQL generation...
2025-07-09 12:08:33 | INFO | __main__ | 📊 Executing SQL: SELECT SUM(od.quantityOrdered * od.priceEach) AS totalRevenue FROM orderdetails od JOIN orders o ON od.orderNumber = o.orderNumber WHERE STRFTIME('%Y', o.orderDate) = '2005';
2025-07-09 12:08:33 | INFO | __main__ | ✅ Query completed: 1 results in 21.259s
2025-07-09 12:09:07 | INFO | __main__ | 
🔍 Processing Query #4: Which month had the highest sales volume?
2025-07-09 12:09:07 | INFO | __main__ | 🎯 Using RAG for SQL generation...
2025-07-09 12:09:36 | INFO | __main__ | 📊 Executing SQL: SELECT STRFTIME('%Y-%m', o.orderDate) AS orderMonth, SUM(od.quantityOrdered) AS salesVolume FROM orders o JOIN orderdetails od ON o.orderNumber = od.orderNumber GROUP BY STRFTIME('%Y-%m', o.orderDate) ORDER BY salesVolume DESC LIMIT 1;
2025-07-09 12:09:36 | INFO | __main__ | ✅ Query completed: 1 results in 29.010s
2025-07-09 12:10:23 | INFO | __main__ | 
🔍 Processing Query #5: Distribution of customers by country
2025-07-09 12:10:23 | INFO | __main__ | 🎯 Using RAG for SQL generation...
2025-07-09 12:10:31 | INFO | __main__ | 📊 Executing SQL: SELECT COUNT(DISTINCT c.country) AS unique_countries FROM customers c;
2025-07-09 12:10:31 | INFO | __main__ | ✅ Query completed: 1 results in 7.339s
2025-07-09 12:11:18 | INFO | __main__ | 
🔍 Processing Query #6: what's the total revenue generated in 2005?
2025-07-09 12:11:18 | INFO | __main__ | 🎯 Using RAG for SQL generation...
2025-07-09 12:11:39 | INFO | __main__ | 📊 Executing SQL: SELECT SUM(od.quantityOrdered * od.priceEach) AS totalRevenue FROM orderdetails od JOIN orders o ON od.orderNumber = o.orderNumber WHERE STRFTIME('%Y', o.orderDate) = '2005';
2025-07-09 12:11:40 | INFO | __main__ | ✅ Query completed: 1 results in 21.314s
2025-07-09 12:11:50 | INFO | __main__ | 
🔍 Processing Query #7: what's the total revenue generated in 2003?
2025-07-09 12:11:50 | INFO | __main__ | 🎯 Using RAG for SQL generation...
2025-07-09 12:12:11 | INFO | __main__ | 📊 Executing SQL: SELECT SUM(od.quantityOrdered * od.priceEach) AS totalRevenue FROM orderdetails od JOIN orders o ON od.orderNumber = o.orderNumber WHERE STRFTIME('%Y', o.orderDate) = '2003';
2025-07-09 12:12:12 | INFO | __main__ | ✅ Query completed: 1 results in 21.282s
2025-07-09 12:12:31 | INFO | __main__ | 
🔍 Processing Query #8: Seasonal trends in product sales
2025-07-09 12:12:31 | INFO | __main__ | 🎯 Using RAG for SQL generation...
2025-07-09 12:12:56 | INFO | __main__ | 📊 Executing SQL: SELECT STRFTIME('%Y', o.orderDate) AS year, SUM(od.quantityOrdered * od.priceEach) AS revenue FROM orders o JOIN orderdetails od ON o.orderNumber = od.orderNumber GROUP BY STRFTIME('%Y', o.orderDate);
2025-07-09 12:12:56 | INFO | __main__ | ✅ Query completed: 1 results in 24.568s
2025-07-09 12:13:28 | INFO | __main__ | 
🔍 Processing Query #9: what are the unique years available?
2025-07-09 12:13:28 | INFO | __main__ | 🎯 Using RAG for SQL generation...
2025-07-09 12:13:36 | INFO | __main__ | 📊 Executing SQL: SELECT DISTINCT STRFTIME('%Y', o.orderDate) FROM orders o;
2025-07-09 12:13:36 | INFO | __main__ | ✅ Query completed: 1 results in 8.190s
2025-07-09 12:14:11 | INFO | __main__ | 
🔍 Processing Query #10: top 3 product lines by revenue
2025-07-09 12:14:11 | INFO | __main__ | 🎯 Using RAG for SQL generation...
2025-07-09 12:14:31 | INFO | __main__ | 📊 Executing SQL: SELECT productLine, SUM(od.quantityOrdered * od.priceEach) AS revenue FROM orderdetails od JOIN products p ON od.productCode = p.productCode GROUP BY productLine ORDER BY revenue DESC LIMIT 3;
2025-07-09 12:14:31 | INFO | __main__ | ✅ Query completed: 1 results in 19.620s
2025-07-09 12:15:05 | INFO | __main__ | 
🔍 Processing Query #11: top 3 products by revenue
2025-07-09 12:15:05 | INFO | __main__ | 🎯 Using RAG for SQL generation...
2025-07-09 12:15:28 | INFO | __main__ | 📊 Executing SQL: SELECT p.productName, SUM(od.quantityOrdered * od.priceEach) AS revenue FROM orderdetails od JOIN products p ON od.productCode = p.productCode GROUP BY p.productName ORDER BY revenue DESC LIMIT 3;
2025-07-09 12:15:28 | INFO | __main__ | ✅ Query completed: 1 results in 23.306s
2025-07-09 12:15:41 | INFO | __main__ | 
🔍 Processing Query #12: list all unique products
2025-07-09 12:15:41 | INFO | __main__ | 🎯 Using RAG for SQL generation...
2025-07-09 12:15:44 | INFO | __main__ | 📊 Executing SQL: SELECT DISTINCT productCode FROM products;
2025-07-09 12:15:44 | INFO | __main__ | ✅ Query completed: 5 results in 3.677s
2025-07-09 12:15:56 | INFO | __main__ | 
🔍 Processing Query #13: list all unique products by name
2025-07-09 12:15:56 | INFO | __main__ | 🎯 Using RAG for SQL generation...
2025-07-09 12:15:59 | INFO | __main__ | 📊 Executing SQL: SELECT DISTINCT productName FROM products;
2025-07-09 12:15:59 | INFO | __main__ | ✅ Query completed: 5 results in 3.231s
2025-07-09 12:23:23 | INFO | __main__ | 🧹 Cleanup completed
2025-07-09 12:56:20 | INFO | __main__ | 🚀 Initializing CRM SQL Retriever Bot...
2025-07-09 12:56:20 | INFO | __main__ | 📊 Connecting to CRM database...
2025-07-09 12:56:20 | INFO | __main__ | ✅ Connected to CRM database: /home/risad/projects/sql_retriever/data/test_crm_v1.db
2025-07-09 12:56:20 | INFO | __main__ | 🎯 Initializing RAG client...
2025-07-09 12:56:32 | INFO | __main__ | ✅ RAG client initialized
2025-07-09 12:56:32 | INFO | __main__ | 
================================================================================
2025-07-09 12:56:32 | INFO | __main__ | 🎉 CRM SQL Retriever Bot - Successfully Initialized!
2025-07-09 12:56:32 | INFO | __main__ | ================================================================================
2025-07-09 12:56:32 | INFO | __main__ | 📊 Database: /home/risad/projects/sql_retriever/data/test_crm_v1.db
2025-07-09 12:56:32 | INFO | __main__ | 🎯 RAG Enabled: True
2025-07-09 12:56:32 | INFO | __main__ | 🛡️ Safety Checks: True
2025-07-09 12:56:32 | INFO | __main__ | 
📋 CRM Database Schema:
2025-07-09 12:56:32 | INFO | __main__ |    
2025-07-09 12:56:32 | INFO | __main__ |    This is a CRM (Customer Relationship Management) database for a company that sells products.
2025-07-09 12:56:32 | INFO | __main__ |    Key business entities:
2025-07-09 12:56:32 | INFO | __main__ |    - Customers: Companies/individuals who buy products
2025-07-09 12:56:32 | INFO | __main__ |    - Products: Items sold by the company, organized into product lines
2025-07-09 12:56:32 | INFO | __main__ |    - Orders: Purchase orders from customers
2025-07-09 12:56:32 | INFO | __main__ |    - Employees: Company staff who manage sales and operations
2025-07-09 12:56:32 | INFO | __main__ |    - Offices: Company locations where employees work
2025-07-09 12:56:32 | INFO | __main__ |    - Payments: Customer payments for orders
2025-07-09 12:56:32 | INFO | __main__ |    
2025-07-09 12:56:32 | INFO | __main__ |    ... (truncated)
2025-07-09 12:56:32 | INFO | __main__ | 
🚀 Ready to process queries!
2025-07-09 12:56:32 | INFO | __main__ | ================================================================================
2025-07-09 12:56:52 | INFO | __main__ | 
🔍 Processing Query #1: what's the date range of orders?
2025-07-09 12:56:52 | INFO | __main__ | 🎯 Using RAG for SQL generation...
2025-07-09 12:57:02 | INFO | __main__ | 📊 Executing SQL: SELECT STRFTIME('%Y-%m', o.orderDate) AS orderRange FROM orders o;
2025-07-09 12:57:02 | INFO | __main__ | ✅ Query completed: 11 results in 9.522s
2025-07-09 12:57:43 | INFO | __main__ | 
🔍 Processing Query #2: show customer distribution by country with counts
2025-07-09 12:57:43 | INFO | __main__ | 🎯 Using RAG for SQL generation...
2025-07-09 12:57:50 | INFO | __main__ | 📊 Executing SQL: SELECT c.country, COUNT(c.customerNumber) AS customer_count FROM customers c;
2025-07-09 12:57:50 | INFO | __main__ | ✅ Query completed: 1 results in 7.047s
2025-07-09 12:58:16 | INFO | __main__ | 
🔍 Processing Query #3: show all the unique countries
2025-07-09 12:58:16 | INFO | __main__ | 🎯 Using RAG for SQL generation...
2025-07-09 12:58:19 | INFO | __main__ | 📊 Executing SQL: SELECT DISTINCT customers.country FROM customers;
2025-07-09 12:58:19 | INFO | __main__ | ✅ Query completed: 9 results in 3.339s
2025-07-09 12:59:28 | INFO | __main__ | 
🔍 Processing Query #4: show customer distribution of all coutries by count
2025-07-09 12:59:28 | INFO | __main__ | 🎯 Using RAG for SQL generation...
2025-07-09 12:59:35 | INFO | __main__ | 📊 Executing SQL: SELECT c.country, COUNT(c.customerNumber) AS customer_count FROM customers c;
2025-07-09 12:59:35 | INFO | __main__ | ✅ Query completed: 1 results in 6.983s
2025-07-09 13:00:04 | INFO | __main__ | 🧹 Cleanup completed
2025-07-09 13:02:41 | INFO | __main__ | 🚀 Initializing CRM SQL Retriever Bot...
2025-07-09 13:02:41 | INFO | __main__ | 📊 Connecting to CRM database...
2025-07-09 13:02:41 | INFO | __main__ | ✅ Connected to CRM database: /home/risad/projects/sql_retriever/data/test_crm_v1.db
2025-07-09 13:02:41 | INFO | __main__ | 🎯 Initializing RAG client...
2025-07-09 13:02:51 | INFO | __main__ | ✅ RAG client initialized
2025-07-09 13:02:51 | INFO | __main__ | 
================================================================================
2025-07-09 13:02:51 | INFO | __main__ | 🎉 CRM SQL Retriever Bot - Successfully Initialized!
2025-07-09 13:02:51 | INFO | __main__ | ================================================================================
2025-07-09 13:02:51 | INFO | __main__ | 📊 Database: /home/risad/projects/sql_retriever/data/test_crm_v1.db
2025-07-09 13:02:51 | INFO | __main__ | 🎯 RAG Enabled: True
2025-07-09 13:02:51 | INFO | __main__ | 🛡️ Safety Checks: True
2025-07-09 13:02:51 | INFO | __main__ | 
📋 CRM Database Schema:
2025-07-09 13:02:51 | INFO | __main__ |    
2025-07-09 13:02:51 | INFO | __main__ |    This is a CRM (Customer Relationship Management) database for a company that sells products.
2025-07-09 13:02:51 | INFO | __main__ |    Key business entities:
2025-07-09 13:02:51 | INFO | __main__ |    - Customers: Companies/individuals who buy products
2025-07-09 13:02:51 | INFO | __main__ |    - Products: Items sold by the company, organized into product lines
2025-07-09 13:02:51 | INFO | __main__ |    - Orders: Purchase orders from customers
2025-07-09 13:02:51 | INFO | __main__ |    - Employees: Company staff who manage sales and operations
2025-07-09 13:02:51 | INFO | __main__ |    - Offices: Company locations where employees work
2025-07-09 13:02:51 | INFO | __main__ |    - Payments: Customer payments for orders
2025-07-09 13:02:51 | INFO | __main__ |    
2025-07-09 13:02:51 | INFO | __main__ |    ... (truncated)
2025-07-09 13:02:51 | INFO | __main__ | 
🚀 Ready to process queries!
2025-07-09 13:02:51 | INFO | __main__ | ================================================================================
2025-07-09 13:02:54 | INFO | __main__ | 
🔍 Processing Query #1: how customer distribution of all coutries by count
2025-07-09 13:02:54 | INFO | __main__ | 🎯 Using RAG for SQL generation...
2025-07-09 13:03:02 | INFO | __main__ | 📊 Executing SQL: SELECT c.country, COUNT(c.customerNumber) AS customer_count FROM customers c GROUP BY c.country, country, customer_count;
2025-07-09 13:03:02 | ERROR | __main__ | ❌ Query processing failed: aggregate functions are not allowed in the GROUP BY clause
2025-07-09 13:06:00 | INFO | __main__ | 🧹 Cleanup completed
2025-07-21 03:46:30 | INFO | app | 🚀 Starting SQL Retriever API...
2025-07-21 03:46:30 | INFO | main | 🚀 Initializing CRM SQL Retriever Bot...
2025-07-21 03:46:30 | INFO | main | 📊 Connecting to CRM database...
2025-07-21 03:46:30 | INFO | main | ✅ Connected to CRM database: /home/risad/projects/sql_retriever/data/test_crm_v1.db
2025-07-21 03:46:30 | INFO | main | 🎯 Initializing RAG client...
2025-07-21 03:46:53 | INFO | main | ✅ RAG client initialized
2025-07-21 03:46:53 | INFO | main | 
================================================================================
2025-07-21 03:46:53 | INFO | main | 🎉 CRM SQL Retriever Bot - Successfully Initialized!
2025-07-21 03:46:53 | INFO | main | ================================================================================
2025-07-21 03:46:53 | INFO | main | 📊 Database: /home/risad/projects/sql_retriever/data/test_crm_v1.db
2025-07-21 03:46:53 | INFO | main | 🎯 RAG Enabled: True
2025-07-21 03:46:53 | INFO | main | 🛡️ Safety Checks: True
2025-07-21 03:46:53 | INFO | main | 
📋 CRM Database Schema:
2025-07-21 03:46:53 | INFO | main |    
2025-07-21 03:46:53 | INFO | main |    This is a CRM (Customer Relationship Management) database for a company that sells products.
2025-07-21 03:46:53 | INFO | main |    Key business entities:
2025-07-21 03:46:53 | INFO | main |    - Customers: Companies/individuals who buy products
2025-07-21 03:46:53 | INFO | main |    - Products: Items sold by the company, organized into product lines
2025-07-21 03:46:53 | INFO | main |    - Orders: Purchase orders from customers
2025-07-21 03:46:53 | INFO | main |    - Employees: Company staff who manage sales and operations
2025-07-21 03:46:53 | INFO | main |    - Offices: Company locations where employees work
2025-07-21 03:46:53 | INFO | main |    - Payments: Customer payments for orders
2025-07-21 03:46:53 | INFO | main |    
2025-07-21 03:46:53 | INFO | main |    ... (truncated)
2025-07-21 03:46:53 | INFO | main | 
🚀 Ready to process queries!
2025-07-21 03:46:53 | INFO | main | ================================================================================
2025-07-21 03:46:53 | INFO | app | ✅ CRM SQL Retriever initialized successfully
2025-07-21 03:46:53 | INFO | app | ✅ Database connection verified: 1 rows
2025-07-21 03:46:53 | INFO | app | 🎉 SQL Retriever API ready!
2025-07-21 03:57:21 | INFO | app | 🚀 Starting SQL Retriever API...
2025-07-21 03:57:21 | INFO | main | 🚀 Initializing CRM SQL Retriever Bot...
2025-07-21 03:57:21 | INFO | main | 📊 Connecting to CRM database...
2025-07-21 03:57:21 | INFO | main | ✅ Connected to CRM database: /home/risad/projects/sql_retriever/data/test_crm_v1.db
2025-07-21 03:57:21 | INFO | main | 🎯 Initializing RAG client...
2025-07-21 03:57:41 | INFO | main | ✅ RAG client initialized
2025-07-21 03:57:41 | INFO | main | 
================================================================================
2025-07-21 03:57:41 | INFO | main | 🎉 CRM SQL Retriever Bot - Successfully Initialized!
2025-07-21 03:57:41 | INFO | main | ================================================================================
2025-07-21 03:57:41 | INFO | main | 📊 Database: /home/risad/projects/sql_retriever/data/test_crm_v1.db
2025-07-21 03:57:41 | INFO | main | 🎯 RAG Enabled: True
2025-07-21 03:57:41 | INFO | main | 🛡️ Safety Checks: True
2025-07-21 03:57:41 | INFO | main | 
📋 CRM Database Schema:
2025-07-21 03:57:41 | INFO | main |    
2025-07-21 03:57:41 | INFO | main |    This is a CRM (Customer Relationship Management) database for a company that sells products.
2025-07-21 03:57:41 | INFO | main |    Key business entities:
2025-07-21 03:57:41 | INFO | main |    - Customers: Companies/individuals who buy products
2025-07-21 03:57:41 | INFO | main |    - Products: Items sold by the company, organized into product lines
2025-07-21 03:57:41 | INFO | main |    - Orders: Purchase orders from customers
2025-07-21 03:57:41 | INFO | main |    - Employees: Company staff who manage sales and operations
2025-07-21 03:57:41 | INFO | main |    - Offices: Company locations where employees work
2025-07-21 03:57:41 | INFO | main |    - Payments: Customer payments for orders
2025-07-21 03:57:41 | INFO | main |    
2025-07-21 03:57:41 | INFO | main |    ... (truncated)
2025-07-21 03:57:41 | INFO | main | 
🚀 Ready to process queries!
2025-07-21 03:57:41 | INFO | main | ================================================================================
2025-07-21 03:57:41 | INFO | app | ✅ CRM SQL Retriever initialized successfully
2025-07-21 03:57:41 | INFO | app | ✅ Database connection verified: 1 rows
2025-07-21 03:57:41 | INFO | app | 🎉 SQL Retriever API ready!
2025-07-21 04:04:11 | INFO | app | 🧹 Shutting down SQL Retriever API...
2025-07-21 04:04:11 | INFO | main | 🧹 Cleanup completed
2025-07-21 04:04:11 | INFO | app | 👋 SQL Retriever API shut down complete
2025-07-21 16:28:59 | INFO | app | 🚀 Starting SQL Retriever API...
2025-07-21 16:28:59 | INFO | main | 🚀 Initializing CRM SQL Retriever Bot...
2025-07-21 16:28:59 | INFO | main | 📊 Connecting to CRM database...
2025-07-21 16:28:59 | INFO | main | ✅ Connected to CRM database: /home/risad/projects/sql_retriever/data/test_crm_v1.db
2025-07-21 16:28:59 | INFO | main | 🎯 Initializing RAG client...
2025-07-21 16:30:28 | INFO | app | 🚀 Starting SQL Retriever API...
2025-07-21 16:30:28 | INFO | main | 🚀 Initializing CRM SQL Retriever Bot...
2025-07-21 16:30:28 | INFO | main | 📊 Connecting to CRM database...
2025-07-21 16:30:28 | INFO | main | ✅ Connected to CRM database: /home/risad/projects/sql_retriever/data/test_crm_v1.db
2025-07-21 16:30:28 | INFO | main | 🎯 Initializing RAG client...
2025-07-21 16:36:33 | INFO | app | 🚀 Starting SQL Retriever API...
2025-07-21 16:36:33 | INFO | main | 🚀 Initializing CRM SQL Retriever Bot...
2025-07-21 16:36:33 | INFO | main | 📊 Connecting to CRM database...
2025-07-21 16:36:33 | INFO | main | ✅ Connected to CRM database: /home/risad/projects/sql_retriever/data/test_crm_v1.db
2025-07-21 16:36:33 | INFO | main | 🎯 Initializing RAG client...
2025-07-21 16:36:53 | INFO | main | ✅ RAG client initialized
2025-07-21 16:36:53 | INFO | main | 
================================================================================
2025-07-21 16:36:53 | INFO | main | 🎉 CRM SQL Retriever Bot - Successfully Initialized!
2025-07-21 16:36:53 | INFO | main | ================================================================================
2025-07-21 16:36:53 | INFO | main | 📊 Database: /home/risad/projects/sql_retriever/data/test_crm_v1.db
2025-07-21 16:36:53 | INFO | main | 🎯 RAG Enabled: True
2025-07-21 16:36:53 | INFO | main | 🛡️ Safety Checks: True
2025-07-21 16:36:53 | INFO | main | 
📋 CRM Database Schema:
2025-07-21 16:36:53 | INFO | main |    
2025-07-21 16:36:53 | INFO | main |    This is a CRM (Customer Relationship Management) database for a company that sells products.
2025-07-21 16:36:53 | INFO | main |    Key business entities:
2025-07-21 16:36:53 | INFO | main |    - Customers: Companies/individuals who buy products
2025-07-21 16:36:53 | INFO | main |    - Products: Items sold by the company, organized into product lines
2025-07-21 16:36:53 | INFO | main |    - Orders: Purchase orders from customers
2025-07-21 16:36:53 | INFO | main |    - Employees: Company staff who manage sales and operations
2025-07-21 16:36:53 | INFO | main |    - Offices: Company locations where employees work
2025-07-21 16:36:53 | INFO | main |    - Payments: Customer payments for orders
2025-07-21 16:36:53 | INFO | main |    
2025-07-21 16:36:53 | INFO | main |    ... (truncated)
2025-07-21 16:36:53 | INFO | main | 
🚀 Ready to process queries!
2025-07-21 16:36:53 | INFO | main | ================================================================================
2025-07-21 16:36:53 | INFO | app | ✅ CRM SQL Retriever initialized successfully
2025-07-21 16:36:53 | INFO | app | ✅ Database connection verified: 1 rows
2025-07-21 16:36:53 | INFO | app | 🎉 SQL Retriever API ready!
2025-07-21 16:38:02 | INFO | app | 🧹 Shutting down SQL Retriever API...
2025-07-21 16:38:02 | INFO | main | 🧹 Cleanup completed
2025-07-21 16:38:02 | INFO | app | 👋 SQL Retriever API shut down complete
2025-07-21 16:40:56 | INFO | app | 🚀 Starting SQL Retriever API...
2025-07-21 16:40:56 | INFO | main | 🚀 Initializing CRM SQL Retriever Bot...
2025-07-21 16:40:56 | INFO | main | 📊 Connecting to CRM database...
2025-07-21 16:40:56 | INFO | main | ✅ Connected to CRM database: /home/risad/projects/sql_retriever/data/test_crm_v1.db
2025-07-21 16:40:56 | INFO | main | 🎯 Initializing RAG client...
2025-07-21 16:41:14 | INFO | main | ✅ RAG client initialized
2025-07-21 16:41:14 | INFO | main | 
================================================================================
2025-07-21 16:41:14 | INFO | main | 🎉 CRM SQL Retriever Bot - Successfully Initialized!
2025-07-21 16:41:14 | INFO | main | ================================================================================
2025-07-21 16:41:14 | INFO | main | 📊 Database: /home/risad/projects/sql_retriever/data/test_crm_v1.db
2025-07-21 16:41:14 | INFO | main | 🎯 RAG Enabled: True
2025-07-21 16:41:14 | INFO | main | 🛡️ Safety Checks: True
2025-07-21 16:41:14 | INFO | main | 
📋 CRM Database Schema:
2025-07-21 16:41:14 | INFO | main |    
2025-07-21 16:41:14 | INFO | main |    This is a CRM (Customer Relationship Management) database for a company that sells products.
2025-07-21 16:41:14 | INFO | main |    Key business entities:
2025-07-21 16:41:14 | INFO | main |    - Customers: Companies/individuals who buy products
2025-07-21 16:41:14 | INFO | main |    - Products: Items sold by the company, organized into product lines
2025-07-21 16:41:14 | INFO | main |    - Orders: Purchase orders from customers
2025-07-21 16:41:14 | INFO | main |    - Employees: Company staff who manage sales and operations
2025-07-21 16:41:14 | INFO | main |    - Offices: Company locations where employees work
2025-07-21 16:41:14 | INFO | main |    - Payments: Customer payments for orders
2025-07-21 16:41:14 | INFO | main |    
2025-07-21 16:41:14 | INFO | main |    ... (truncated)
2025-07-21 16:41:14 | INFO | main | 
🚀 Ready to process queries!
2025-07-21 16:41:14 | INFO | main | ================================================================================
2025-07-21 16:41:14 | INFO | app | ✅ CRM SQL Retriever initialized successfully
2025-07-21 16:41:14 | INFO | app | ✅ Database connection verified: 1 rows
2025-07-21 16:41:14 | INFO | app | 🎉 SQL Retriever API ready!
2025-07-21 16:43:50 | INFO | app | 🧹 Shutting down SQL Retriever API...
2025-07-21 16:43:50 | INFO | main | 🧹 Cleanup completed
2025-07-21 16:43:50 | INFO | app | 👋 SQL Retriever API shut down complete
2025-07-21 16:43:56 | INFO | app | 🚀 Starting SQL Retriever API...
2025-07-21 16:43:56 | INFO | main | 🚀 Initializing CRM SQL Retriever Bot...
2025-07-21 16:43:56 | INFO | main | 📊 Connecting to CRM database...
2025-07-21 16:43:56 | INFO | main | ✅ Connected to CRM database: /home/risad/projects/sql_retriever/data/test_crm_v1.db
2025-07-21 16:43:56 | INFO | main | 🎯 Initializing RAG client...
2025-07-21 16:44:14 | INFO | main | ✅ RAG client initialized
2025-07-21 16:44:14 | INFO | main | 
================================================================================
2025-07-21 16:44:14 | INFO | main | 🎉 CRM SQL Retriever Bot - Successfully Initialized!
2025-07-21 16:44:14 | INFO | main | ================================================================================
2025-07-21 16:44:14 | INFO | main | 📊 Database: /home/risad/projects/sql_retriever/data/test_crm_v1.db
2025-07-21 16:44:14 | INFO | main | 🎯 RAG Enabled: True
2025-07-21 16:44:14 | INFO | main | 🛡️ Safety Checks: True
2025-07-21 16:44:14 | INFO | main | 
📋 CRM Database Schema:
2025-07-21 16:44:14 | INFO | main |    
2025-07-21 16:44:14 | INFO | main |    This is a CRM (Customer Relationship Management) database for a company that sells products.
2025-07-21 16:44:14 | INFO | main |    Key business entities:
2025-07-21 16:44:14 | INFO | main |    - Customers: Companies/individuals who buy products
2025-07-21 16:44:14 | INFO | main |    - Products: Items sold by the company, organized into product lines
2025-07-21 16:44:14 | INFO | main |    - Orders: Purchase orders from customers
2025-07-21 16:44:14 | INFO | main |    - Employees: Company staff who manage sales and operations
2025-07-21 16:44:14 | INFO | main |    - Offices: Company locations where employees work
2025-07-21 16:44:14 | INFO | main |    - Payments: Customer payments for orders
2025-07-21 16:44:14 | INFO | main |    
2025-07-21 16:44:14 | INFO | main |    ... (truncated)
2025-07-21 16:44:14 | INFO | main | 
🚀 Ready to process queries!
2025-07-21 16:44:14 | INFO | main | ================================================================================
2025-07-21 16:44:14 | INFO | app | ✅ CRM SQL Retriever initialized successfully
2025-07-21 16:44:14 | INFO | app | ✅ Database connection verified: 1 rows
2025-07-21 16:44:14 | INFO | app | 🎉 SQL Retriever API ready!
2025-07-21 16:44:22 | INFO | app | 🚀 Starting SQL Retriever API...
2025-07-21 16:44:22 | INFO | main | 🚀 Initializing CRM SQL Retriever Bot...
2025-07-21 16:44:22 | INFO | main | 📊 Connecting to CRM database...
2025-07-21 16:44:22 | INFO | main | ✅ Connected to CRM database: /home/risad/projects/sql_retriever/data/test_crm_v1.db
2025-07-21 16:44:22 | INFO | main | 🎯 Initializing RAG client...
2025-07-21 16:44:41 | INFO | main | ✅ RAG client initialized
2025-07-21 16:44:41 | INFO | main | 
================================================================================
2025-07-21 16:44:41 | INFO | main | 🎉 CRM SQL Retriever Bot - Successfully Initialized!
2025-07-21 16:44:41 | INFO | main | ================================================================================
2025-07-21 16:44:41 | INFO | main | 📊 Database: /home/risad/projects/sql_retriever/data/test_crm_v1.db
2025-07-21 16:44:41 | INFO | main | 🎯 RAG Enabled: True
2025-07-21 16:44:41 | INFO | main | 🛡️ Safety Checks: True
2025-07-21 16:44:41 | INFO | main | 
📋 CRM Database Schema:
2025-07-21 16:44:41 | INFO | main |    
2025-07-21 16:44:41 | INFO | main |    This is a CRM (Customer Relationship Management) database for a company that sells products.
2025-07-21 16:44:41 | INFO | main |    Key business entities:
2025-07-21 16:44:41 | INFO | main |    - Customers: Companies/individuals who buy products
2025-07-21 16:44:41 | INFO | main |    - Products: Items sold by the company, organized into product lines
2025-07-21 16:44:41 | INFO | main |    - Orders: Purchase orders from customers
2025-07-21 16:44:41 | INFO | main |    - Employees: Company staff who manage sales and operations
2025-07-21 16:44:41 | INFO | main |    - Offices: Company locations where employees work
2025-07-21 16:44:41 | INFO | main |    - Payments: Customer payments for orders
2025-07-21 16:44:41 | INFO | main |    
2025-07-21 16:44:41 | INFO | main |    ... (truncated)
2025-07-21 16:44:41 | INFO | main | 
🚀 Ready to process queries!
2025-07-21 16:44:41 | INFO | main | ================================================================================
2025-07-21 16:44:41 | INFO | app | ✅ CRM SQL Retriever initialized successfully
2025-07-21 16:44:41 | INFO | app | ✅ Database connection verified: 1 rows
2025-07-21 16:44:41 | INFO | app | 🎉 SQL Retriever API ready!
2025-07-21 16:44:49 | INFO | app | 🚀 Starting SQL Retriever API...
2025-07-21 16:44:49 | INFO | main | 🚀 Initializing CRM SQL Retriever Bot...
2025-07-21 16:44:49 | INFO | main | 📊 Connecting to CRM database...
2025-07-21 16:44:49 | INFO | main | ✅ Connected to CRM database: /home/risad/projects/sql_retriever/data/test_crm_v1.db
2025-07-21 16:44:49 | INFO | main | 🎯 Initializing RAG client...
2025-07-21 16:45:08 | INFO | main | ✅ RAG client initialized
2025-07-21 16:45:08 | INFO | main | 
================================================================================
2025-07-21 16:45:08 | INFO | main | 🎉 CRM SQL Retriever Bot - Successfully Initialized!
2025-07-21 16:45:08 | INFO | main | ================================================================================
2025-07-21 16:45:08 | INFO | main | 📊 Database: /home/risad/projects/sql_retriever/data/test_crm_v1.db
2025-07-21 16:45:08 | INFO | main | 🎯 RAG Enabled: True
2025-07-21 16:45:08 | INFO | main | 🛡️ Safety Checks: True
2025-07-21 16:45:08 | INFO | main | 
📋 CRM Database Schema:
2025-07-21 16:45:08 | INFO | main |    
2025-07-21 16:45:08 | INFO | main |    This is a CRM (Customer Relationship Management) database for a company that sells products.
2025-07-21 16:45:08 | INFO | main |    Key business entities:
2025-07-21 16:45:08 | INFO | main |    - Customers: Companies/individuals who buy products
2025-07-21 16:45:08 | INFO | main |    - Products: Items sold by the company, organized into product lines
2025-07-21 16:45:08 | INFO | main |    - Orders: Purchase orders from customers
2025-07-21 16:45:08 | INFO | main |    - Employees: Company staff who manage sales and operations
2025-07-21 16:45:08 | INFO | main |    - Offices: Company locations where employees work
2025-07-21 16:45:08 | INFO | main |    - Payments: Customer payments for orders
2025-07-21 16:45:08 | INFO | main |    
2025-07-21 16:45:08 | INFO | main |    ... (truncated)
2025-07-21 16:45:08 | INFO | main | 
🚀 Ready to process queries!
2025-07-21 16:45:08 | INFO | main | ================================================================================
2025-07-21 16:45:08 | INFO | app | ✅ CRM SQL Retriever initialized successfully
2025-07-21 16:45:08 | INFO | app | ✅ Database connection verified: 1 rows
2025-07-21 16:45:08 | INFO | app | 🎉 SQL Retriever API ready!
2025-07-21 16:45:17 | INFO | app | 🚀 Starting SQL Retriever API...
2025-07-21 16:45:17 | INFO | main | 🚀 Initializing CRM SQL Retriever Bot...
2025-07-21 16:45:17 | INFO | main | 📊 Connecting to CRM database...
2025-07-21 16:45:17 | INFO | main | ✅ Connected to CRM database: /home/risad/projects/sql_retriever/data/test_crm_v1.db
2025-07-21 16:45:17 | INFO | main | 🎯 Initializing RAG client...
2025-07-21 16:45:35 | INFO | main | ✅ RAG client initialized
2025-07-21 16:45:35 | INFO | main | 
================================================================================
2025-07-21 16:45:35 | INFO | main | 🎉 CRM SQL Retriever Bot - Successfully Initialized!
2025-07-21 16:45:35 | INFO | main | ================================================================================
2025-07-21 16:45:35 | INFO | main | 📊 Database: /home/risad/projects/sql_retriever/data/test_crm_v1.db
2025-07-21 16:45:35 | INFO | main | 🎯 RAG Enabled: True
2025-07-21 16:45:35 | INFO | main | 🛡️ Safety Checks: True
2025-07-21 16:45:35 | INFO | main | 
📋 CRM Database Schema:
2025-07-21 16:45:35 | INFO | main |    
2025-07-21 16:45:35 | INFO | main |    This is a CRM (Customer Relationship Management) database for a company that sells products.
2025-07-21 16:45:35 | INFO | main |    Key business entities:
2025-07-21 16:45:35 | INFO | main |    - Customers: Companies/individuals who buy products
2025-07-21 16:45:35 | INFO | main |    - Products: Items sold by the company, organized into product lines
2025-07-21 16:45:35 | INFO | main |    - Orders: Purchase orders from customers
2025-07-21 16:45:35 | INFO | main |    - Employees: Company staff who manage sales and operations
2025-07-21 16:45:35 | INFO | main |    - Offices: Company locations where employees work
2025-07-21 16:45:35 | INFO | main |    - Payments: Customer payments for orders
2025-07-21 16:45:35 | INFO | main |    
2025-07-21 16:45:35 | INFO | main |    ... (truncated)
2025-07-21 16:45:35 | INFO | main | 
🚀 Ready to process queries!
2025-07-21 16:45:35 | INFO | main | ================================================================================
2025-07-21 16:45:35 | INFO | app | ✅ CRM SQL Retriever initialized successfully
2025-07-21 16:45:35 | INFO | app | ✅ Database connection verified: 1 rows
2025-07-21 16:45:35 | INFO | app | 🎉 SQL Retriever API ready!
2025-07-21 16:45:43 | INFO | app | 🚀 Starting SQL Retriever API...
2025-07-21 16:45:43 | INFO | main | 🚀 Initializing CRM SQL Retriever Bot...
2025-07-21 16:45:43 | INFO | main | 📊 Connecting to CRM database...
2025-07-21 16:45:43 | INFO | main | ✅ Connected to CRM database: /home/risad/projects/sql_retriever/data/test_crm_v1.db
2025-07-21 16:45:43 | INFO | main | 🎯 Initializing RAG client...
2025-07-21 16:46:03 | INFO | main | ✅ RAG client initialized
2025-07-21 16:46:03 | INFO | main | 
================================================================================
2025-07-21 16:46:03 | INFO | main | 🎉 CRM SQL Retriever Bot - Successfully Initialized!
2025-07-21 16:46:03 | INFO | main | ================================================================================
2025-07-21 16:46:03 | INFO | main | 📊 Database: /home/risad/projects/sql_retriever/data/test_crm_v1.db
2025-07-21 16:46:03 | INFO | main | 🎯 RAG Enabled: True
2025-07-21 16:46:03 | INFO | main | 🛡️ Safety Checks: True
2025-07-21 16:46:03 | INFO | main | 
📋 CRM Database Schema:
2025-07-21 16:46:03 | INFO | main |    
2025-07-21 16:46:03 | INFO | main |    This is a CRM (Customer Relationship Management) database for a company that sells products.
2025-07-21 16:46:03 | INFO | main |    Key business entities:
2025-07-21 16:46:03 | INFO | main |    - Customers: Companies/individuals who buy products
2025-07-21 16:46:03 | INFO | main |    - Products: Items sold by the company, organized into product lines
2025-07-21 16:46:03 | INFO | main |    - Orders: Purchase orders from customers
2025-07-21 16:46:03 | INFO | main |    - Employees: Company staff who manage sales and operations
2025-07-21 16:46:03 | INFO | main |    - Offices: Company locations where employees work
2025-07-21 16:46:03 | INFO | main |    - Payments: Customer payments for orders
2025-07-21 16:46:03 | INFO | main |    
2025-07-21 16:46:03 | INFO | main |    ... (truncated)
2025-07-21 16:46:03 | INFO | main | 
🚀 Ready to process queries!
2025-07-21 16:46:03 | INFO | main | ================================================================================
2025-07-21 16:46:03 | INFO | app | ✅ CRM SQL Retriever initialized successfully
2025-07-21 16:46:03 | INFO | app | ✅ Database connection verified: 1 rows
2025-07-21 16:46:03 | INFO | app | 🎉 SQL Retriever API ready!
2025-07-21 16:46:11 | INFO | app | 🚀 Starting SQL Retriever API...
2025-07-21 16:46:11 | INFO | main | 🚀 Initializing CRM SQL Retriever Bot...
2025-07-21 16:46:11 | INFO | main | 📊 Connecting to CRM database...
2025-07-21 16:46:11 | INFO | main | ✅ Connected to CRM database: /home/risad/projects/sql_retriever/data/test_crm_v1.db
2025-07-21 16:46:11 | INFO | main | 🎯 Initializing RAG client...
2025-07-21 16:46:30 | INFO | main | ✅ RAG client initialized
2025-07-21 16:46:30 | INFO | main | 
================================================================================
2025-07-21 16:46:30 | INFO | main | 🎉 CRM SQL Retriever Bot - Successfully Initialized!
2025-07-21 16:46:30 | INFO | main | ================================================================================
2025-07-21 16:46:30 | INFO | main | 📊 Database: /home/risad/projects/sql_retriever/data/test_crm_v1.db
2025-07-21 16:46:30 | INFO | main | 🎯 RAG Enabled: True
2025-07-21 16:46:30 | INFO | main | 🛡️ Safety Checks: True
2025-07-21 16:46:30 | INFO | main | 
📋 CRM Database Schema:
2025-07-21 16:46:30 | INFO | main |    
2025-07-21 16:46:30 | INFO | main |    This is a CRM (Customer Relationship Management) database for a company that sells products.
2025-07-21 16:46:30 | INFO | main |    Key business entities:
2025-07-21 16:46:30 | INFO | main |    - Customers: Companies/individuals who buy products
2025-07-21 16:46:30 | INFO | main |    - Products: Items sold by the company, organized into product lines
2025-07-21 16:46:30 | INFO | main |    - Orders: Purchase orders from customers
2025-07-21 16:46:30 | INFO | main |    - Employees: Company staff who manage sales and operations
2025-07-21 16:46:30 | INFO | main |    - Offices: Company locations where employees work
2025-07-21 16:46:30 | INFO | main |    - Payments: Customer payments for orders
2025-07-21 16:46:30 | INFO | main |    
2025-07-21 16:46:30 | INFO | main |    ... (truncated)
2025-07-21 16:46:30 | INFO | main | 
🚀 Ready to process queries!
2025-07-21 16:46:30 | INFO | main | ================================================================================
2025-07-21 16:46:30 | INFO | app | ✅ CRM SQL Retriever initialized successfully
2025-07-21 16:46:30 | INFO | app | ✅ Database connection verified: 1 rows
2025-07-21 16:46:30 | INFO | app | 🎉 SQL Retriever API ready!
2025-07-21 16:46:37 | INFO | app | 🚀 Starting SQL Retriever API...
2025-07-21 16:46:37 | INFO | main | 🚀 Initializing CRM SQL Retriever Bot...
2025-07-21 16:46:37 | INFO | main | 📊 Connecting to CRM database...
2025-07-21 16:46:37 | INFO | main | ✅ Connected to CRM database: /home/risad/projects/sql_retriever/data/test_crm_v1.db
2025-07-21 16:46:37 | INFO | main | 🎯 Initializing RAG client...
2025-07-21 16:46:56 | INFO | main | ✅ RAG client initialized
2025-07-21 16:46:56 | INFO | main | 
================================================================================
2025-07-21 16:46:56 | INFO | main | 🎉 CRM SQL Retriever Bot - Successfully Initialized!
2025-07-21 16:46:56 | INFO | main | ================================================================================
2025-07-21 16:46:56 | INFO | main | 📊 Database: /home/risad/projects/sql_retriever/data/test_crm_v1.db
2025-07-21 16:46:56 | INFO | main | 🎯 RAG Enabled: True
2025-07-21 16:46:56 | INFO | main | 🛡️ Safety Checks: True
2025-07-21 16:46:56 | INFO | main | 
📋 CRM Database Schema:
2025-07-21 16:46:56 | INFO | main |    
2025-07-21 16:46:56 | INFO | main |    This is a CRM (Customer Relationship Management) database for a company that sells products.
2025-07-21 16:46:56 | INFO | main |    Key business entities:
2025-07-21 16:46:56 | INFO | main |    - Customers: Companies/individuals who buy products
2025-07-21 16:46:56 | INFO | main |    - Products: Items sold by the company, organized into product lines
2025-07-21 16:46:56 | INFO | main |    - Orders: Purchase orders from customers
2025-07-21 16:46:56 | INFO | main |    - Employees: Company staff who manage sales and operations
2025-07-21 16:46:56 | INFO | main |    - Offices: Company locations where employees work
2025-07-21 16:46:56 | INFO | main |    - Payments: Customer payments for orders
2025-07-21 16:46:56 | INFO | main |    
2025-07-21 16:46:56 | INFO | main |    ... (truncated)
2025-07-21 16:46:56 | INFO | main | 
🚀 Ready to process queries!
2025-07-21 16:46:56 | INFO | main | ================================================================================
2025-07-21 16:46:56 | INFO | app | ✅ CRM SQL Retriever initialized successfully
2025-07-21 16:46:56 | INFO | app | ✅ Database connection verified: 1 rows
2025-07-21 16:46:56 | INFO | app | 🎉 SQL Retriever API ready!
2025-07-21 16:48:39 | INFO | app | 🧹 Shutting down SQL Retriever API...
2025-07-21 16:48:39 | INFO | main | 🧹 Cleanup completed
2025-07-21 16:48:39 | INFO | app | 👋 SQL Retriever API shut down complete
2025-07-21 16:48:45 | INFO | app | 🚀 Starting SQL Retriever API...
2025-07-21 16:48:45 | INFO | main | 🚀 Initializing CRM SQL Retriever Bot...
2025-07-21 16:48:45 | INFO | main | 📊 Connecting to CRM database...
2025-07-21 16:48:45 | INFO | main | ✅ Connected to CRM database: /home/risad/projects/sql_retriever/data/test_crm_v1.db
2025-07-21 16:48:45 | INFO | main | 🎯 Initializing RAG client...
2025-07-21 16:49:04 | INFO | main | ✅ RAG client initialized
2025-07-21 16:49:04 | INFO | main | 
================================================================================
2025-07-21 16:49:04 | INFO | main | 🎉 CRM SQL Retriever Bot - Successfully Initialized!
2025-07-21 16:49:04 | INFO | main | ================================================================================
2025-07-21 16:49:04 | INFO | main | 📊 Database: /home/risad/projects/sql_retriever/data/test_crm_v1.db
2025-07-21 16:49:04 | INFO | main | 🎯 RAG Enabled: True
2025-07-21 16:49:04 | INFO | main | 🛡️ Safety Checks: True
2025-07-21 16:49:04 | INFO | main | 
📋 CRM Database Schema:
2025-07-21 16:49:04 | INFO | main |    
2025-07-21 16:49:04 | INFO | main |    This is a CRM (Customer Relationship Management) database for a company that sells products.
2025-07-21 16:49:04 | INFO | main |    Key business entities:
2025-07-21 16:49:04 | INFO | main |    - Customers: Companies/individuals who buy products
2025-07-21 16:49:04 | INFO | main |    - Products: Items sold by the company, organized into product lines
2025-07-21 16:49:04 | INFO | main |    - Orders: Purchase orders from customers
2025-07-21 16:49:04 | INFO | main |    - Employees: Company staff who manage sales and operations
2025-07-21 16:49:04 | INFO | main |    - Offices: Company locations where employees work
2025-07-21 16:49:04 | INFO | main |    - Payments: Customer payments for orders
2025-07-21 16:49:04 | INFO | main |    
2025-07-21 16:49:04 | INFO | main |    ... (truncated)
2025-07-21 16:49:04 | INFO | main | 
🚀 Ready to process queries!
2025-07-21 16:49:04 | INFO | main | ================================================================================
2025-07-21 16:49:04 | INFO | app | ✅ CRM SQL Retriever initialized successfully
2025-07-21 16:49:04 | INFO | app | ✅ Database connection verified: 1 rows
2025-07-21 16:49:04 | INFO | app | 🎉 SQL Retriever API ready!
2025-07-21 16:49:11 | INFO | app | 🚀 Starting SQL Retriever API...
2025-07-21 16:49:11 | INFO | main | 🚀 Initializing CRM SQL Retriever Bot...
2025-07-21 16:49:11 | INFO | main | 📊 Connecting to CRM database...
2025-07-21 16:49:11 | INFO | main | ✅ Connected to CRM database: /home/risad/projects/sql_retriever/data/test_crm_v1.db
2025-07-21 16:49:11 | INFO | main | 🎯 Initializing RAG client...
2025-07-21 16:49:30 | INFO | main | ✅ RAG client initialized
2025-07-21 16:49:30 | INFO | main | 
================================================================================
2025-07-21 16:49:30 | INFO | main | 🎉 CRM SQL Retriever Bot - Successfully Initialized!
2025-07-21 16:49:30 | INFO | main | ================================================================================
2025-07-21 16:49:30 | INFO | main | 📊 Database: /home/risad/projects/sql_retriever/data/test_crm_v1.db
2025-07-21 16:49:30 | INFO | main | 🎯 RAG Enabled: True
2025-07-21 16:49:30 | INFO | main | 🛡️ Safety Checks: True
2025-07-21 16:49:30 | INFO | main | 
📋 CRM Database Schema:
2025-07-21 16:49:30 | INFO | main |    
2025-07-21 16:49:30 | INFO | main |    This is a CRM (Customer Relationship Management) database for a company that sells products.
2025-07-21 16:49:30 | INFO | main |    Key business entities:
2025-07-21 16:49:30 | INFO | main |    - Customers: Companies/individuals who buy products
2025-07-21 16:49:30 | INFO | main |    - Products: Items sold by the company, organized into product lines
2025-07-21 16:49:30 | INFO | main |    - Orders: Purchase orders from customers
2025-07-21 16:49:30 | INFO | main |    - Employees: Company staff who manage sales and operations
2025-07-21 16:49:30 | INFO | main |    - Offices: Company locations where employees work
2025-07-21 16:49:30 | INFO | main |    - Payments: Customer payments for orders
2025-07-21 16:49:30 | INFO | main |    
2025-07-21 16:49:30 | INFO | main |    ... (truncated)
2025-07-21 16:49:30 | INFO | main | 
🚀 Ready to process queries!
2025-07-21 16:49:30 | INFO | main | ================================================================================
2025-07-21 16:49:30 | INFO | app | ✅ CRM SQL Retriever initialized successfully
2025-07-21 16:49:30 | INFO | app | ✅ Database connection verified: 1 rows
2025-07-21 16:49:30 | INFO | app | 🎉 SQL Retriever API ready!
2025-07-21 16:49:39 | INFO | app | 🚀 Starting SQL Retriever API...
2025-07-21 16:49:39 | INFO | main | 🚀 Initializing CRM SQL Retriever Bot...
2025-07-21 16:49:39 | INFO | main | 📊 Connecting to CRM database...
2025-07-21 16:49:39 | INFO | main | ✅ Connected to CRM database: /home/risad/projects/sql_retriever/data/test_crm_v1.db
2025-07-21 16:49:39 | INFO | main | 🎯 Initializing RAG client...
2025-07-21 16:49:57 | INFO | main | ✅ RAG client initialized
2025-07-21 16:49:57 | INFO | main | 
================================================================================
2025-07-21 16:49:57 | INFO | main | 🎉 CRM SQL Retriever Bot - Successfully Initialized!
2025-07-21 16:49:57 | INFO | main | ================================================================================
2025-07-21 16:49:57 | INFO | main | 📊 Database: /home/risad/projects/sql_retriever/data/test_crm_v1.db
2025-07-21 16:49:57 | INFO | main | 🎯 RAG Enabled: True
2025-07-21 16:49:57 | INFO | main | 🛡️ Safety Checks: True
2025-07-21 16:49:57 | INFO | main | 
📋 CRM Database Schema:
2025-07-21 16:49:57 | INFO | main |    
2025-07-21 16:49:57 | INFO | main |    This is a CRM (Customer Relationship Management) database for a company that sells products.
2025-07-21 16:49:57 | INFO | main |    Key business entities:
2025-07-21 16:49:57 | INFO | main |    - Customers: Companies/individuals who buy products
2025-07-21 16:49:57 | INFO | main |    - Products: Items sold by the company, organized into product lines
2025-07-21 16:49:57 | INFO | main |    - Orders: Purchase orders from customers
2025-07-21 16:49:57 | INFO | main |    - Employees: Company staff who manage sales and operations
2025-07-21 16:49:57 | INFO | main |    - Offices: Company locations where employees work
2025-07-21 16:49:57 | INFO | main |    - Payments: Customer payments for orders
2025-07-21 16:49:57 | INFO | main |    
2025-07-21 16:49:57 | INFO | main |    ... (truncated)
2025-07-21 16:49:57 | INFO | main | 
🚀 Ready to process queries!
2025-07-21 16:49:57 | INFO | main | ================================================================================
2025-07-21 16:49:57 | INFO | app | ✅ CRM SQL Retriever initialized successfully
2025-07-21 16:49:57 | INFO | app | ✅ Database connection verified: 1 rows
2025-07-21 16:49:57 | INFO | app | 🎉 SQL Retriever API ready!
2025-07-23 12:37:10 | INFO | app | 🚀 Starting SQL Retriever API with Runpod services...
2025-07-23 12:37:10 | ERROR | app | ❌ Failed to initialize database: Failed to connect to sqlite database: SQLite database file not found: postgresql://sql_retriever_user:SecurePass123@34.9.191.121:5432/crm_database
2025-07-23 12:37:10 | ERROR | app | ❌ Failed to initialize application: Failed to connect to sqlite database: SQLite database file not found: postgresql://sql_retriever_user:SecurePass123@34.9.191.121:5432/crm_database
2025-07-23 12:38:10 | INFO | app | 🚀 Starting SQL Retriever API with Runpod services...
2025-07-23 12:38:15 | INFO | app | ✅ Database connection initialized
2025-07-23 12:38:15 | INFO | app | ✅ Runpod SQL Retriever initialized successfully
2025-07-23 12:38:20 | INFO | app | ✅ Database connection verified: 1 rows
2025-07-23 12:38:23 | INFO | app | ✅ Embedding service connected
2025-07-23 12:38:24 | INFO | app | ✅ LLM service connected
2025-07-23 12:38:24 | INFO | app | 🎉 SQL Retriever API ready with Runpod services!
2025-07-23 12:39:03 | ERROR | app | Unhandled exception: Object of type datetime is not JSON serializable
2025-07-23 12:39:30 | ERROR | app | Unhandled exception: Object of type datetime is not JSON serializable
2025-07-23 12:40:19 | ERROR | app | Health check error: 'DatabaseConnection' object has no attribute 'db_path'
2025-07-23 12:41:14 | INFO | app | 🧹 Shutting down SQL Retriever API...
2025-07-23 12:41:14 | INFO | app | 👋 SQL Retriever API shut down complete
2025-07-23 12:41:25 | INFO | app | 🚀 Starting SQL Retriever API with Runpod services...
2025-07-23 12:41:31 | INFO | app | ✅ Database connection initialized
2025-07-23 12:41:31 | INFO | app | ✅ Runpod SQL Retriever initialized successfully
2025-07-23 12:41:37 | INFO | app | ✅ Database connection verified: 1 rows
2025-07-23 12:41:39 | INFO | app | ✅ Embedding service connected
2025-07-23 12:41:40 | INFO | app | ✅ LLM service connected
2025-07-23 12:41:40 | INFO | app | 🎉 SQL Retriever API ready with Runpod services!
2025-07-23 12:42:19 | ERROR | app | Unhandled exception: Object of type datetime is not JSON serializable
2025-07-23 12:43:52 | INFO | app | 🧹 Shutting down SQL Retriever API...
2025-07-23 12:43:52 | INFO | app | 👋 SQL Retriever API shut down complete
2025-07-23 12:45:03 | INFO | app | 🚀 Starting SQL Retriever API with Runpod services...
2025-07-23 12:45:08 | INFO | app | ✅ Database connection initialized
2025-07-23 12:45:08 | INFO | app | ✅ Runpod SQL Retriever initialized successfully
2025-07-23 12:45:13 | INFO | app | ✅ Database connection verified: 1 rows
2025-07-23 12:45:15 | INFO | app | ✅ Embedding service connected
2025-07-23 12:45:17 | INFO | app | ✅ LLM service connected
2025-07-23 12:45:17 | INFO | app | 🎉 SQL Retriever API ready with Runpod services!
2025-07-23 12:46:15 | INFO | app | Found 0 similar examples
2025-07-23 12:46:16 | ERROR | app | LLM service call failed: LLM service error: 404 - {"object":"error","message":"The model `llama-3b-instruct` does not exist.","type":"NotFoundError","param":null,"code":404}
2025-07-23 12:46:16 | ERROR | app | LLM service failed: LLM service error: 404 - {"object":"error","message":"The model `llama-3b-instruct` does not exist.","type":"NotFoundError","param":null,"code":404}
2025-07-23 12:46:16 | ERROR | app | Query processing failed: Both LLM service and example retrieval failed: LLM service error: 404 - {"object":"error","message":"The model `llama-3b-instruct` does not exist.","type":"NotFoundError","param":null,"code":404}
2025-07-23 12:47:18 | INFO | app | Found 0 similar examples
2025-07-23 12:47:19 | ERROR | app | LLM service call failed: LLM service error: 404 - {"object":"error","message":"The model `llama-3b-instruct` does not exist.","type":"NotFoundError","param":null,"code":404}
2025-07-23 12:47:19 | ERROR | app | LLM service failed: LLM service error: 404 - {"object":"error","message":"The model `llama-3b-instruct` does not exist.","type":"NotFoundError","param":null,"code":404}
2025-07-23 12:47:19 | ERROR | app | Query processing failed: Both LLM service and example retrieval failed: LLM service error: 404 - {"object":"error","message":"The model `llama-3b-instruct` does not exist.","type":"NotFoundError","param":null,"code":404}
2025-07-23 12:47:37 | INFO | app | 🧹 Shutting down SQL Retriever API...
2025-07-23 12:47:37 | INFO | app | 👋 SQL Retriever API shut down complete
2025-07-23 12:47:45 | INFO | app | 🚀 Starting SQL Retriever API with Runpod services...
2025-07-23 12:47:51 | INFO | app | ✅ Database connection initialized
2025-07-23 12:47:51 | INFO | app | ✅ Runpod SQL Retriever initialized successfully
2025-07-23 12:47:56 | INFO | app | ✅ Database connection verified: 1 rows
2025-07-23 12:47:59 | INFO | app | ✅ Embedding service connected
2025-07-23 12:48:00 | INFO | app | ✅ LLM service connected
2025-07-23 12:48:00 | INFO | app | 🎉 SQL Retriever API ready with Runpod services!
2025-07-23 12:48:09 | INFO | app | Found 0 similar examples
2025-07-23 12:48:12 | INFO | app | Generated SQL: customers.salesRepEmployeeNumber, SUM(orderdetails.quantityOrdered * orderdetails.priceEach) AS revenue FROM customers JOIN orders ON customers.salesRepEmployeeNumber = orders.salesRepEmployeeNumber GROUP BY customers.salesRepEmployeeNumber ORDER BY revenue DESC LIMIT 5;
2025-07-23 12:48:13 | ERROR | app | SQL execution failed: (psycopg2.errors.SyntaxError) syntax error at or near "customers"
LINE 1: customers.salesRepEmployeeNumber, SUM(orderdetails.quantityO...
        ^

[SQL: customers.salesRepEmployeeNumber, SUM(orderdetails.quantityOrdered * orderdetails.priceEach) AS revenue FROM customers JOIN orders ON customers.salesRepEmployeeNumber = orders.salesRepEmployeeNumber GROUP BY customers.salesRepEmployeeNumber ORDER BY revenue DESC LIMIT 5;]
(Background on this error at: https://sqlalche.me/e/20/f405)
2025-07-23 12:49:29 | INFO | app | Found 0 similar examples
2025-07-23 12:49:31 | INFO | app | Generated SQL: customers.salesRepEmployeeNumber, SUM(orderdetails.quantityOrdered * orderdetails.priceEach) AS revenue FROM customers JOIN orders ON customers.salesRepEmployeeNumber = orders.salesRepEmployeeNumber GROUP BY customers.salesRepEmployeeNumber ORDER BY revenue DESC LIMIT 5;
2025-07-23 12:49:32 | ERROR | app | SQL execution failed: (psycopg2.errors.SyntaxError) syntax error at or near "customers"
LINE 1: customers.salesRepEmployeeNumber, SUM(orderdetails.quantityO...
        ^

[SQL: customers.salesRepEmployeeNumber, SUM(orderdetails.quantityOrdered * orderdetails.priceEach) AS revenue FROM customers JOIN orders ON customers.salesRepEmployeeNumber = orders.salesRepEmployeeNumber GROUP BY customers.salesRepEmployeeNumber ORDER BY revenue DESC LIMIT 5;]
(Background on this error at: https://sqlalche.me/e/20/f405)
2025-07-23 12:49:58 | INFO | app | 🧹 Shutting down SQL Retriever API...
2025-07-23 12:49:58 | INFO | app | 👋 SQL Retriever API shut down complete
2025-07-23 12:50:07 | INFO | app | 🚀 Starting SQL Retriever API with Runpod services...
2025-07-23 12:50:12 | INFO | app | ✅ Database connection initialized
2025-07-23 12:50:12 | INFO | app | ✅ Runpod SQL Retriever initialized successfully
2025-07-23 12:50:17 | INFO | app | ✅ Database connection verified: 1 rows
2025-07-23 12:50:20 | INFO | app | ✅ Embedding service connected
2025-07-23 12:50:21 | INFO | app | ✅ LLM service connected
2025-07-23 12:50:21 | INFO | app | 🎉 SQL Retriever API ready with Runpod services!
2025-07-23 12:50:51 | INFO | app | Found 0 similar examples
2025-07-23 12:50:53 | INFO | app | Generated SQL: customers.salesRepEmployeeNumber, SUM(orderdetails.quantityOrdered * orderdetails.priceEach) AS revenue 
FROM customers 
JOIN orders ON customers.salesRepEmployeeNumber = orders.salesRepEmployeeNumber 
GROUP BY customers.salesRepEmployeeNumber 
ORDER BY revenue DESC 
LIMIT 5;
2025-07-23 12:50:54 | ERROR | app | SQL execution failed: (psycopg2.errors.SyntaxError) syntax error at or near "customers"
LINE 1: customers.salesRepEmployeeNumber, SUM(orderdetails.quantityO...
        ^

[SQL: customers.salesRepEmployeeNumber, SUM(orderdetails.quantityOrdered * orderdetails.priceEach) AS revenue 
FROM customers 
JOIN orders ON customers.salesRepEmployeeNumber = orders.salesRepEmployeeNumber 
GROUP BY customers.salesRepEmployeeNumber 
ORDER BY revenue DESC 
LIMIT 5;]
(Background on this error at: https://sqlalche.me/e/20/f405)
2025-07-23 12:51:21 | INFO | app | 🧹 Shutting down SQL Retriever API...
2025-07-23 12:51:21 | INFO | app | 👋 SQL Retriever API shut down complete
2025-07-23 12:52:32 | INFO | app | 🚀 Starting SQL Retriever API with Runpod services...
2025-07-23 12:52:38 | INFO | app | ✅ Database connection initialized
2025-07-23 12:52:38 | INFO | app | ✅ Runpod SQL Retriever initialized successfully
2025-07-23 12:52:43 | INFO | app | ✅ Database connection verified: 1 rows
2025-07-23 12:52:45 | INFO | app | ✅ Embedding service connected
2025-07-23 12:52:47 | INFO | app | ✅ LLM service connected
2025-07-23 12:52:47 | INFO | app | 🎉 SQL Retriever API ready with Runpod services!
2025-07-23 12:53:00 | INFO | app | Found 0 similar examples
2025-07-23 12:53:01 | INFO | app | Generated SQL: customers.* FROM customers;
2025-07-23 12:53:03 | ERROR | app | SQL execution failed: (psycopg2.errors.SyntaxError) syntax error at or near "customers"
LINE 1: customers.* FROM customers;
        ^

[SQL: customers.* FROM customers;]
(Background on this error at: https://sqlalche.me/e/20/f405)
2025-07-23 12:54:12 | INFO | app | 🧹 Shutting down SQL Retriever API...
2025-07-23 12:54:12 | INFO | app | 👋 SQL Retriever API shut down complete
2025-07-23 12:54:20 | INFO | app | 🚀 Starting SQL Retriever API with Runpod services...
2025-07-23 12:54:26 | INFO | app | ✅ Database connection initialized
2025-07-23 12:54:26 | INFO | app | ✅ Runpod SQL Retriever initialized successfully
2025-07-23 12:54:31 | INFO | app | ✅ Database connection verified: 1 rows
2025-07-23 12:54:33 | INFO | app | ✅ Embedding service connected
2025-07-23 12:54:35 | INFO | app | ✅ LLM service connected
2025-07-23 12:54:35 | INFO | app | 🎉 SQL Retriever API ready with Runpod services!
2025-07-23 12:54:48 | INFO | app | Found 0 similar examples
2025-07-23 12:54:50 | INFO | app | Generated SQL: customers.salesRepEmployeeNumber, customers.customerName, customers.customerEmail 
FROM customers;
2025-07-23 12:54:51 | ERROR | app | SQL execution failed: (psycopg2.errors.SyntaxError) syntax error at or near "customers"
LINE 1: customers.salesRepEmployeeNumber, customers.customerName, cu...
        ^

[SQL: customers.salesRepEmployeeNumber, customers.customerName, customers.customerEmail 
FROM customers;]
(Background on this error at: https://sqlalche.me/e/20/f405)
2025-07-23 12:56:42 | INFO | app | 🧹 Shutting down SQL Retriever API...
2025-07-23 12:56:42 | INFO | app | 👋 SQL Retriever API shut down complete
2025-07-23 12:56:50 | INFO | app | 🚀 Starting SQL Retriever API with Runpod services...
2025-07-23 12:56:55 | INFO | app | ✅ Database connection initialized
2025-07-23 12:56:55 | INFO | app | ✅ Runpod SQL Retriever initialized successfully
2025-07-23 12:57:01 | INFO | app | ✅ Database connection verified: 1 rows
2025-07-23 12:57:03 | INFO | app | ✅ Embedding service connected
2025-07-23 12:57:04 | INFO | app | ✅ LLM service connected
2025-07-23 12:57:04 | INFO | app | 🎉 SQL Retriever API ready with Runpod services!
2025-07-23 12:57:15 | INFO | app | Found 0 similar examples
2025-07-23 12:57:16 | INFO | app | Generated SQL: SELECT customers.* FROM customers;
2025-07-23 13:00:55 | ERROR | app | Unhandled exception: Object of type datetime is not JSON serializable
2025-07-23 13:02:38 | INFO | app | 🧹 Shutting down SQL Retriever API...
2025-07-23 13:02:38 | INFO | app | 👋 SQL Retriever API shut down complete
2025-07-23 13:03:30 | INFO | app | 🚀 Starting SQL Retriever API with Runpod services...
2025-07-23 13:03:35 | INFO | app | ✅ Database connection initialized
2025-07-23 13:03:35 | INFO | app | ✅ Runpod SQL Retriever initialized successfully
2025-07-23 13:03:41 | INFO | app | ✅ Database connection verified: 1 rows
2025-07-23 13:03:43 | INFO | app | ✅ Embedding service connected
2025-07-23 13:03:45 | INFO | app | ✅ LLM service connected
2025-07-23 13:03:45 | INFO | app | 🎉 SQL Retriever API ready with Runpod services!
2025-07-23 13:05:00 | INFO | app | Found 0 similar examples
2025-07-23 13:05:01 | INFO | app | Generated SQL: SELECT customers.name, customers.creditLimit FROM customers ORDER BY creditLimit DESC LIMIT 5;
2025-07-23 13:05:02 | ERROR | app | SQL execution failed: (psycopg2.errors.UndefinedColumn) column customers.name does not exist
LINE 1: SELECT customers.name, customers.creditLimit FROM customers ...
               ^

[SQL: SELECT customers.name, customers.creditLimit FROM customers ORDER BY creditLimit DESC LIMIT 5;]
(Background on this error at: https://sqlalche.me/e/20/f405)
2025-07-23 13:07:52 | INFO | app | 🧹 Shutting down SQL Retriever API...
2025-07-23 13:07:52 | INFO | app | 👋 SQL Retriever API shut down complete
2025-07-23 13:08:00 | INFO | app | 🚀 Starting SQL Retriever API with Runpod services...
2025-07-23 13:08:06 | INFO | app | ✅ Database connection initialized
2025-07-23 13:08:06 | INFO | app | ✅ Runpod SQL Retriever initialized successfully
2025-07-23 13:08:11 | INFO | app | ✅ Database connection verified: 1 rows
2025-07-23 13:08:13 | INFO | app | ✅ Embedding service connected
2025-07-23 13:08:15 | INFO | app | ✅ LLM service connected
2025-07-23 13:08:15 | INFO | app | 🎉 SQL Retriever API ready with Runpod services!
2025-07-23 13:08:45 | INFO | app | Found 0 similar examples
2025-07-23 13:08:46 | INFO | app | Generated SQL: SELECT customers.name, customers.creditLimit FROM customers ORDER BY creditLimit DESC LIMIT 5;
2025-07-23 13:08:48 | ERROR | app | SQL execution failed: (psycopg2.errors.UndefinedColumn) column customers.name does not exist
LINE 1: SELECT customers.name, customers.creditLimit FROM customers ...
               ^

[SQL: SELECT customers.name, customers.creditLimit FROM customers ORDER BY creditLimit DESC LIMIT 5;]
(Background on this error at: https://sqlalche.me/e/20/f405)
2025-07-23 13:10:43 | INFO | app | Found 0 similar examples
2025-07-23 13:10:45 | INFO | app | Generated SQL: SELECT customers.name, customers.creditLimit FROM customers ORDER BY creditLimit DESC LIMIT 5;
2025-07-23 13:10:46 | ERROR | app | SQL execution failed: (psycopg2.errors.UndefinedColumn) column customers.name does not exist
LINE 1: SELECT customers.name, customers.creditLimit FROM customers ...
               ^

[SQL: SELECT customers.name, customers.creditLimit FROM customers ORDER BY creditLimit DESC LIMIT 5;]
(Background on this error at: https://sqlalche.me/e/20/f405)
2025-07-23 13:11:16 | INFO | app | 🧹 Shutting down SQL Retriever API...
2025-07-23 13:11:16 | INFO | app | 👋 SQL Retriever API shut down complete
2025-07-23 13:12:28 | INFO | app | 🚀 Starting SQL Retriever API with Runpod services...
2025-07-23 13:12:33 | INFO | app | ✅ Database connection initialized
2025-07-23 13:12:33 | INFO | app | ✅ Runpod SQL Retriever initialized successfully
2025-07-23 13:12:39 | INFO | app | ✅ Database connection verified: 1 rows
2025-07-23 13:12:41 | INFO | app | ✅ Embedding service connected
2025-07-23 13:12:42 | INFO | app | ✅ LLM service connected
2025-07-23 13:12:42 | INFO | app | 🎉 SQL Retriever API ready with Runpod services!
2025-07-23 13:13:45 | INFO | app | Found 0 similar examples
2025-07-23 13:13:46 | INFO | app | Generated SQL: SELECT c.customername, c.creditlimit FROM customers c ORDER BY c.creditlimit DESC LIMIT 5;
2025-07-23 13:15:45 | INFO | app | Found 0 similar examples
2025-07-23 13:15:47 | INFO | app | Generated SQL: SELECT DISTINCT T1.customername FROM customers AS T1 INNER JOIN employees AS T2 ON T1.salesrepemployeenumber = T2.employeenumber WHERE T2.country = 'France';
2025-07-23 13:15:48 | ERROR | app | SQL execution failed: (psycopg2.errors.UndefinedColumn) column t2.country does not exist
LINE 1: ....salesrepemployeenumber = T2.employeenumber WHERE T2.country...
                                                             ^
HINT:  Perhaps you meant to reference the column "t1.country".

[SQL: SELECT DISTINCT T1.customername FROM customers AS T1 INNER JOIN employees AS T2 ON T1.salesrepemployeenumber = T2.employeenumber WHERE T2.country = 'France';]
(Background on this error at: https://sqlalche.me/e/20/f405)
2025-07-23 13:20:55 | INFO | app | 🧹 Shutting down SQL Retriever API...
2025-07-23 13:20:55 | INFO | app | 👋 SQL Retriever API shut down complete
2025-07-23 13:21:03 | INFO | app | 🚀 Starting SQL Retriever API with Runpod services...
2025-07-23 13:21:08 | INFO | app | ✅ Database connection initialized
2025-07-23 13:21:23 | INFO | app | ✅ SQL validator initialized
2025-07-23 13:21:23 | INFO | app | ✅ Runpod SQL Retriever initialized successfully
2025-07-23 13:21:25 | INFO | app | ✅ Database connection verified: 1 rows
2025-07-23 13:21:27 | INFO | app | ✅ Embedding service connected
2025-07-23 13:21:28 | INFO | app | ✅ LLM service connected
2025-07-23 13:21:28 | INFO | app | 🎉 SQL Retriever API ready with Runpod services!
2025-07-23 13:22:38 | INFO | app | Found 0 similar examples
2025-07-23 13:22:40 | INFO | app | Generated SQL: SELECT DISTINCT T1.customername FROM customers AS T1 INNER JOIN offices AS T2 ON T1.country = T2.country WHERE T2.country = 'France';
2025-07-23 13:22:41 | INFO | app | SQL auto-corrected from: SELECT DISTINCT T1.customername FROM customers AS T1 INNER JOIN offices AS T2 ON T1.country = T2.country WHERE T2.country = 'France';
2025-07-23 13:22:41 | INFO | app | SQL auto-corrected to: SELECT DISTINCT T1.customerName FROM customers AS T1 INNER JOIN offices AS T2 ON T1.country = T2.country WHERE T2.country = 'France';
2025-07-23 13:23:56 | INFO | app | Found 0 similar examples
2025-07-23 13:23:58 | INFO | app | Generated SQL: SELECT DISTINCT e.lastname, e.firstname 
FROM employees e 
JOIN offices o ON e.officecode = o.officecode 
WHERE o.country = 'France';
2025-07-23 13:23:59 | INFO | app | SQL auto-corrected from: SELECT DISTINCT e.lastname, e.firstname 
FROM employees e 
JOIN offices o ON e.officecode = o.officecode 
WHERE o.country = 'France';
2025-07-23 13:23:59 | INFO | app | SQL auto-corrected to: SELECT DISTINCT e.lastname, e.firstname FROM employees e JOIN offices o ON e.officeCode = o.officeCode WHERE o.country = 'France';
2025-07-23 13:25:00 | INFO | app | Found 0 similar examples
2025-07-23 13:25:02 | INFO | app | Generated SQL: SELECT o.orderdate, c.customername, c.contactlastname, c.contactfirstname 
FROM orders o 
JOIN customers c ON o.customernumber = c.customernumber 
WHERE o.orderdate >= STRFTIME('%Y', '2022-01-01');
2025-07-23 13:25:03 | INFO | app | SQL auto-corrected from: SELECT o.orderdate, c.customername, c.contactlastname, c.contactfirstname 
FROM orders o 
JOIN customers c ON o.customernumber = c.customernumber 
WHERE o.orderdate >= STRFTIME('%Y', '2022-01-01');
2025-07-23 13:25:03 | INFO | app | SQL auto-corrected to: SELECT o.orderDate, c.customerName, c.contactlastname, c.contactfirstname FROM orders o JOIN customers c ON o.customerNumber = c.customerNumber WHERE o.orderDate >= DATE_TRUNC('%Y', '2022-01-01');
2025-07-23 13:25:04 | ERROR | app | SQL execution failed: (psycopg2.errors.AmbiguousFunction) function date_trunc(unknown, unknown) is not unique
LINE 1: ...merNumber = c.customerNumber WHERE o.orderDate >= DATE_TRUNC...
                                                             ^
HINT:  Could not choose a best candidate function. You might need to add explicit type casts.

[SQL: SELECT o.orderDate, c.customerName, c.contactlastname, c.contactfirstname FROM orders o JOIN customers c ON o.customerNumber = c.customerNumber WHERE o.orderDate >= DATE_TRUNC('%%Y', '2022-01-01');]
(Background on this error at: https://sqlalche.me/e/20/f405)
2025-07-23 13:27:50 | INFO | app | 🧹 Shutting down SQL Retriever API...
2025-07-23 13:27:50 | INFO | app | 👋 SQL Retriever API shut down complete
2025-07-23 13:29:45 | INFO | app | 🚀 Starting SQL Retriever API with Runpod services...
2025-07-23 13:29:51 | INFO | app | ✅ Database connection initialized
2025-07-23 13:30:05 | INFO | app | ✅ SQL validator initialized
2025-07-23 13:30:05 | INFO | app | ✅ Runpod SQL Retriever initialized successfully
2025-07-23 13:30:06 | INFO | app | ✅ Database connection verified: 1 rows
2025-07-23 13:30:09 | INFO | app | ✅ Embedding service connected
2025-07-23 13:30:10 | INFO | app | ✅ LLM service connected
2025-07-23 13:30:10 | INFO | app | 🎉 SQL Retriever API ready with Runpod services!
2025-07-23 13:31:13 | INFO | app | Found 0 similar examples
2025-07-23 13:31:15 | INFO | app | Generated SQL: SELECT o.orderdate, c.customername, c.contactlastname, c.contactfirstname 
FROM orders o 
JOIN customers c ON o.customernumber = c.customernumber 
WHERE o.orderdate >= STRFTIME('%Y', '2022-01-01');
2025-07-23 13:31:16 | INFO | app | SQL auto-corrected from: SELECT o.orderdate, c.customername, c.contactlastname, c.contactfirstname 
FROM orders o 
JOIN customers c ON o.customernumber = c.customernumber 
WHERE o.orderdate >= STRFTIME('%Y', '2022-01-01');
2025-07-23 13:31:16 | INFO | app | SQL auto-corrected to: SELECT o.orderDate, c.customerName, c.contactLastName, c.contactFirstName FROM orders o JOIN customers c ON o.customerNumber = c.customerNumber WHERE o.orderDate >= '2022-01-01';
2025-07-23 13:34:07 | INFO | app | Found 0 similar examples
2025-07-23 13:34:09 | INFO | app | Generated SQL: SELECT DISTINCT T1.customername, T1.contactlastname, T1.contactfirstname, T1.country 
FROM customers AS T1 
JOIN offices AS T2 ON T1.country = T2.country 
WHERE T2.territory = 'USA';
2025-07-23 13:34:10 | INFO | app | SQL auto-corrected from: SELECT DISTINCT T1.customername, T1.contactlastname, T1.contactfirstname, T1.country 
FROM customers AS T1 
JOIN offices AS T2 ON T1.country = T2.country 
WHERE T2.territory = 'USA';
2025-07-23 13:34:10 | INFO | app | SQL auto-corrected to: SELECT DISTINCT T1.customerName, T1.contactLastName, T1.contactFirstName, T1.country FROM customers AS T1 JOIN offices AS T2 ON T1.country = T2.country WHERE T2.territory = 'USA';
2025-07-23 13:34:56 | INFO | app | Found 0 similar examples
2025-07-23 13:34:58 | INFO | app | Generated SQL: SELECT DISTINCT T1.customername FROM customers AS T1 INNER JOIN offices AS T2 ON T1.country = T2.country WHERE T2.country = 'France';
2025-07-23 13:34:59 | INFO | app | SQL auto-corrected from: SELECT DISTINCT T1.customername FROM customers AS T1 INNER JOIN offices AS T2 ON T1.country = T2.country WHERE T2.country = 'France';
2025-07-23 13:34:59 | INFO | app | SQL auto-corrected to: SELECT DISTINCT T1.customerName FROM customers AS T1 INNER JOIN offices AS T2 ON T1.country = T2.country WHERE T2.country = 'France';
2025-07-23 13:36:38 | INFO | app | Found 0 similar examples
2025-07-23 13:36:40 | INFO | app | Generated SQL: SELECT c.customername, SUM(od.quantityOrdered * od.priceEach) AS total_spent FROM customers c JOIN orders o ON c.customerNumber = o.customernumber JOIN orderdetails od ON o.orderNumber = od.orderNumber GROUP BY c.customerNumber ORDER BY total_spent DESC LIMIT 1;
2025-07-23 13:36:41 | INFO | app | SQL auto-corrected from: SELECT c.customername, SUM(od.quantityOrdered * od.priceEach) AS total_spent FROM customers c JOIN orders o ON c.customerNumber = o.customernumber JOIN orderdetails od ON o.orderNumber = od.orderNumber GROUP BY c.customerNumber ORDER BY total_spent DESC LIMIT 1;
2025-07-23 13:36:41 | INFO | app | SQL auto-corrected to: SELECT c.customerName, SUM(od.quantityOrdered * od.priceEach) AS total_spent FROM customers c JOIN orders o ON c.customerNumber = o.customerNumber JOIN orderdetails od ON o.orderNumber = od.orderNumber GROUP BY c.customerNumber ORDER BY total_spent DESC LIMIT 1;
2025-07-23 13:37:25 | INFO | app | Found 0 similar examples
2025-07-23 13:37:27 | INFO | app | Generated SQL: SELECT T1.customername, T2.orderdate 
FROM customers AS T1 
JOIN orders AS T2 ON T1.customernumber = T2.customernumber 
WHERE STRFTIME('%Y', T2.orderdate) BETWEEN '2003' AND '2005';
2025-07-23 13:37:28 | INFO | app | SQL auto-corrected from: SELECT T1.customername, T2.orderdate 
FROM customers AS T1 
JOIN orders AS T2 ON T1.customernumber = T2.customernumber 
WHERE STRFTIME('%Y', T2.orderdate) BETWEEN '2003' AND '2005';
2025-07-23 13:37:28 | INFO | app | SQL auto-corrected to: SELECT T1.customerName, T2.orderDate FROM customers AS T1 JOIN orders AS T2 ON T1.customerNumber = T2.customerNumber WHERE STRFTIME('%Y', T2.orderDate) BETWEEN '2003' AND '2005';
2025-07-23 13:37:29 | ERROR | app | SQL execution failed: (psycopg2.errors.UndefinedFunction) function strftime(unknown, date) does not exist
LINE 1: ...T2 ON T1.customerNumber = T2.customerNumber WHERE STRFTIME('...
                                                             ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.

[SQL: SELECT T1.customerName, T2.orderDate FROM customers AS T1 JOIN orders AS T2 ON T1.customerNumber = T2.customerNumber WHERE STRFTIME('%%Y', T2.orderDate) BETWEEN '2003' AND '2005';]
(Background on this error at: https://sqlalche.me/e/20/f405)
2025-07-23 13:38:05 | INFO | app | Found 0 similar examples
2025-07-23 13:38:07 | INFO | app | Generated SQL: SELECT T1.productline, COUNT(DISTINCT T2.customerNumber) AS customer_count, SUM(T2.quantityOrdered * T2.priceEach) AS total_revenue FROM ORDERDETAILS T1 INNER JOIN PRODUCTS T2 ON T1.productcode = T2.productcode GROUP BY T1.productline;
2025-07-23 13:38:08 | INFO | app | SQL auto-corrected from: SELECT T1.productline, COUNT(DISTINCT T2.customerNumber) AS customer_count, SUM(T2.quantityOrdered * T2.priceEach) AS total_revenue FROM ORDERDETAILS T1 INNER JOIN PRODUCTS T2 ON T1.productcode = T2.productcode GROUP BY T1.productline;
2025-07-23 13:38:08 | INFO | app | SQL auto-corrected to: SELECT T1.productline, COUNT(DISTINCT T2.customerNumber) AS customer_count, SUM(T2.quantityOrdered * T2.priceEach) AS total_revenue FROM ORDERDETAILS T1 INNER JOIN PRODUCTS T2 ON T1.productCode = T2.productCode GROUP BY T1.productline;
2025-07-23 13:38:09 | ERROR | app | SQL execution failed: (psycopg2.errors.UndefinedColumn) column t1.productline does not exist
LINE 1: SELECT T1.productline, COUNT(DISTINCT T2.customerNumber) AS ...
               ^
HINT:  Perhaps you meant to reference the column "t2.productline".

[SQL: SELECT T1.productline, COUNT(DISTINCT T2.customerNumber) AS customer_count, SUM(T2.quantityOrdered * T2.priceEach) AS total_revenue FROM ORDERDETAILS T1 INNER JOIN PRODUCTS T2 ON T1.productCode = T2.productCode GROUP BY T1.productline;]
(Background on this error at: https://sqlalche.me/e/20/f405)
2025-07-23 13:38:42 | INFO | app | Found 0 similar examples
2025-07-23 13:38:44 | INFO | app | Generated SQL: SELECT DISTINCT T1.customername, T1.contactlastname, T1.contactfirstname, T1.country 
FROM customers AS T1 
JOIN offices AS T2 ON T1.country = T2.country 
WHERE T2.territory = 'FRANCE';
2025-07-23 13:38:45 | INFO | app | SQL auto-corrected from: SELECT DISTINCT T1.customername, T1.contactlastname, T1.contactfirstname, T1.country 
FROM customers AS T1 
JOIN offices AS T2 ON T1.country = T2.country 
WHERE T2.territory = 'FRANCE';
2025-07-23 13:38:45 | INFO | app | SQL auto-corrected to: SELECT DISTINCT T1.customerName, T1.contactLastName, T1.contactFirstName, T1.country FROM customers AS T1 JOIN offices AS T2 ON T1.country = T2.country WHERE T2.territory = 'FRANCE';
2025-07-23 13:39:44 | INFO | app | Found 0 similar examples
2025-07-23 13:39:47 | INFO | app | Generated SQL: SELECT DISTINCT T1.customername, T1.contactlastname, T1.contactfirstname, T1.phone, T1.addressline1, T1.addressline2, T1.city, T1.state, T1.postalcode, T1.country 
FROM customers AS T1 
JOIN offices AS T2 ON T1.country = T2.country 
WHERE T2.territory = 'FRANCE';
2025-07-23 13:39:48 | INFO | app | SQL auto-corrected from: SELECT DISTINCT T1.customername, T1.contactlastname, T1.contactfirstname, T1.phone, T1.addressline1, T1.addressline2, T1.city, T1.state, T1.postalcode, T1.country 
FROM customers AS T1 
JOIN offices AS T2 ON T1.country = T2.country 
WHERE T2.territory = 'FRANCE';
2025-07-23 13:39:48 | INFO | app | SQL auto-corrected to: SELECT DISTINCT T1.customerName, T1.contactLastName, T1.contactFirstName, T1.phone, T1.addressline1, T1.addressline2, T1.city, T1.state, T1.postalcode, T1.country FROM customers AS T1 JOIN offices AS T2 ON T1.country = T2.country WHERE T2.territory = 'FRANCE';
2025-07-23 13:40:21 | INFO | app | Found 0 similar examples
2025-07-23 13:40:23 | INFO | app | Generated SQL: SELECT DISTINCT T1.customername, T1.contactlastname, T1.contactfirstname, T1.country 
FROM customers AS T1 
JOIN offices AS T2 ON T1.country = T2.country 
WHERE T2.territory = 'France';
2025-07-23 13:40:24 | INFO | app | SQL auto-corrected from: SELECT DISTINCT T1.customername, T1.contactlastname, T1.contactfirstname, T1.country 
FROM customers AS T1 
JOIN offices AS T2 ON T1.country = T2.country 
WHERE T2.territory = 'France';
2025-07-23 13:40:24 | INFO | app | SQL auto-corrected to: SELECT DISTINCT T1.customerName, T1.contactLastName, T1.contactFirstName, T1.country FROM customers AS T1 JOIN offices AS T2 ON T1.country = T2.country WHERE T2.territory = 'France';
2025-07-23 13:40:55 | INFO | app | Found 0 similar examples
2025-07-23 13:40:56 | INFO | app | Generated SQL: SELECT DISTINCT e.lastname, e.firstname 
FROM employees e 
JOIN offices o ON e.officecode = o.officecode 
WHERE o.country = 'France';
2025-07-23 13:40:58 | INFO | app | SQL auto-corrected from: SELECT DISTINCT e.lastname, e.firstname 
FROM employees e 
JOIN offices o ON e.officecode = o.officecode 
WHERE o.country = 'France';
2025-07-23 13:40:58 | INFO | app | SQL auto-corrected to: SELECT DISTINCT e.lastName, e.firstName FROM employees e JOIN offices o ON e.officeCode = o.officeCode WHERE o.country = 'France';
2025-07-23 13:41:40 | INFO | app | Found 0 similar examples
2025-07-23 13:41:42 | INFO | app | Generated SQL: SELECT c.customername, SUM(od.quantityOrdered * od.priceEach) AS total_spent FROM customers c JOIN orders o ON c.customerNumber = o.customernumber JOIN orderdetails od ON o.orderNumber = od.orderNumber GROUP BY c.customername ORDER BY total_spent DESC LIMIT 1;
2025-07-23 13:41:43 | INFO | app | SQL auto-corrected from: SELECT c.customername, SUM(od.quantityOrdered * od.priceEach) AS total_spent FROM customers c JOIN orders o ON c.customerNumber = o.customernumber JOIN orderdetails od ON o.orderNumber = od.orderNumber GROUP BY c.customername ORDER BY total_spent DESC LIMIT 1;
2025-07-23 13:41:43 | INFO | app | SQL auto-corrected to: SELECT c.customerName, SUM(od.quantityOrdered * od.priceEach) AS total_spent FROM customers c JOIN orders o ON c.customerNumber = o.customerNumber JOIN orderdetails od ON o.orderNumber = od.orderNumber GROUP BY c.customerName ORDER BY total_spent DESC LIMIT 1;
2025-07-23 13:44:24 | INFO | app | Found 0 similar examples
2025-07-23 13:44:26 | INFO | app | Generated SQL: SELECT DISTINCT e.lastname, e.firstname 
FROM employees e 
JOIN offices o ON e.officecode = o.officecode 
WHERE o.country = 'France';
2025-07-23 13:44:27 | INFO | app | SQL auto-corrected from: SELECT DISTINCT e.lastname, e.firstname 
FROM employees e 
JOIN offices o ON e.officecode = o.officecode 
WHERE o.country = 'France';
2025-07-23 13:44:27 | INFO | app | SQL auto-corrected to: SELECT DISTINCT e.lastName, e.firstName FROM employees e JOIN offices o ON e.officeCode = o.officeCode WHERE o.country = 'France';
2025-07-23 13:45:23 | INFO | app | Found 0 similar examples
2025-07-23 13:45:25 | INFO | app | Generated SQL: SELECT c.customername, SUM(od.quantityOrdered * od.priceEach) AS total_spent FROM customers c JOIN orders o ON c.customerNumber = o.customernumber JOIN orderdetails od ON o.orderNumber = od.orderNumber GROUP BY c.customername ORDER BY total_spent DESC LIMIT 1;
2025-07-23 13:45:27 | INFO | app | SQL auto-corrected from: SELECT c.customername, SUM(od.quantityOrdered * od.priceEach) AS total_spent FROM customers c JOIN orders o ON c.customerNumber = o.customernumber JOIN orderdetails od ON o.orderNumber = od.orderNumber GROUP BY c.customername ORDER BY total_spent DESC LIMIT 1;
2025-07-23 13:45:27 | INFO | app | SQL auto-corrected to: SELECT c.customerName, SUM(od.quantityOrdered * od.priceEach) AS total_spent FROM customers c JOIN orders o ON c.customerNumber = o.customerNumber JOIN orderdetails od ON o.orderNumber = od.orderNumber GROUP BY c.customerName ORDER BY total_spent DESC LIMIT 1;
2025-07-23 13:51:26 | INFO | app | 🧹 Shutting down SQL Retriever API...
2025-07-23 13:51:26 | INFO | app | 👋 SQL Retriever API shut down complete
2025-07-23 14:44:35 | INFO | app | 🚀 Starting SQL Retriever API with Runpod services...
2025-07-23 14:44:35 | INFO | app | ✅ Database connection initialized
2025-07-23 14:44:35 | INFO | app | ✅ SQL validator initialized
2025-07-23 14:44:35 | INFO | app | ✅ Runpod SQL Retriever initialized successfully
2025-07-23 14:44:35 | INFO | app | ✅ Database connection verified: 1 rows
2025-07-23 14:44:35 | WARNING | app | ⚠️  Embedding service connection failed: HTTPConnectionPool(host='localhost', port=8000): Max retries exceeded with url: /health (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f3285c7ecf0>: Failed to establish a new connection: [Errno 111] Connection refused'))
2025-07-23 14:44:35 | WARNING | app | ⚠️  LLM service connection failed: HTTPConnectionPool(host='localhost', port=8000): Max retries exceeded with url: /v1/models (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f3285ce1880>: Failed to establish a new connection: [Errno 111] Connection refused'))
2025-07-23 14:44:35 | INFO | app | 🎉 SQL Retriever API ready with Runpod services!
2025-07-23 14:47:07 | INFO | app | 🧹 Shutting down SQL Retriever API...
2025-07-23 14:47:07 | INFO | app | 👋 SQL Retriever API shut down complete
2025-07-23 14:49:45 | INFO | app | 🚀 Starting SQL Retriever API with Runpod services...
2025-07-23 14:49:45 | INFO | app | ✅ Database connection initialized
2025-07-23 14:49:45 | INFO | app | ✅ SQL validator initialized
2025-07-23 14:49:45 | INFO | app | ✅ Runpod SQL Retriever initialized successfully
2025-07-23 14:49:45 | INFO | app | ✅ Database connection verified: 1 rows
2025-07-23 14:49:45 | WARNING | app | ⚠️  Embedding service connection failed: HTTPConnectionPool(host='localhost', port=8000): Max retries exceeded with url: /health (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f828e467b00>: Failed to establish a new connection: [Errno 111] Connection refused'))
2025-07-23 14:49:45 | WARNING | app | ⚠️  LLM service connection failed: HTTPConnectionPool(host='localhost', port=8000): Max retries exceeded with url: /v1/models (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f828e4edca0>: Failed to establish a new connection: [Errno 111] Connection refused'))
2025-07-23 14:49:45 | INFO | app | 🎉 SQL Retriever API ready with Runpod services!
2025-07-23 14:51:03 | INFO | app | 🧹 Shutting down SQL Retriever API...
2025-07-23 14:51:03 | INFO | app | 👋 SQL Retriever API shut down complete
2025-07-23 14:51:39 | INFO | app | 🚀 Starting SQL Retriever API with Runpod services...
2025-07-23 14:51:39 | INFO | app | ✅ Database connection initialized
2025-07-23 14:51:39 | INFO | app | ✅ SQL validator initialized
2025-07-23 14:51:39 | INFO | app | ✅ Runpod SQL Retriever initialized successfully
2025-07-23 14:51:39 | INFO | app | ✅ Database connection verified: 1 rows
2025-07-23 14:51:42 | INFO | app | ✅ Embedding service connected
2025-07-23 14:51:52 | WARNING | app | ⚠️  LLM service connection failed: HTTPSConnectionPool(host='fake-url.com', port=443): Max retries exceeded with url: /v1/models (Caused by ConnectTimeoutError(<urllib3.connection.HTTPSConnection object at 0x7f06a0ce1dc0>, 'Connection to fake-url.com timed out. (connect timeout=10)'))
2025-07-23 14:51:52 | INFO | app | 🎉 SQL Retriever API ready with Runpod services!
2025-07-23 14:52:59 | INFO | app | Found 0 similar examples
2025-07-23 14:53:59 | ERROR | app | LLM service failed: LLM service timeout
2025-07-23 14:53:59 | ERROR | app | Query processing failed: Both LLM service and example retrieval failed: LLM service timeout
2025-07-23 14:53:59 | ERROR | app | Query processing error: 1 validation error for QueryResponse
results
  Input should be a valid dictionary [type=dict_type, input_value=[], input_type=list]
    For further information visit https://errors.pydantic.dev/2.11/v/dict_type
2025-07-23 14:54:50 | INFO | app | 🧹 Shutting down SQL Retriever API...
2025-07-23 14:54:50 | INFO | app | 👋 SQL Retriever API shut down complete
2025-07-23 14:54:51 | INFO | app | 🚀 Starting SQL Retriever API with Runpod services...
2025-07-23 14:54:51 | INFO | app | ✅ Database connection initialized
2025-07-23 14:54:51 | INFO | app | ✅ SQL validator initialized
2025-07-23 14:54:51 | INFO | app | ✅ Runpod SQL Retriever initialized successfully
2025-07-23 14:54:51 | INFO | app | ✅ Database connection verified: 1 rows
2025-07-23 14:54:53 | INFO | app | ✅ Embedding service connected
2025-07-23 14:55:03 | WARNING | app | ⚠️  LLM service connection failed: HTTPSConnectionPool(host='fake-url.com', port=443): Max retries exceeded with url: /v1/models (Caused by ConnectTimeoutError(<urllib3.connection.HTTPSConnection object at 0x7f36b31fd760>, 'Connection to fake-url.com timed out. (connect timeout=10)'))
2025-07-23 14:55:03 | INFO | app | 🎉 SQL Retriever API ready with Runpod services!
2025-07-23 14:55:18 | INFO | app | 🚀 Starting SQL Retriever API with Runpod services...
2025-07-23 14:55:18 | INFO | app | ✅ Database connection initialized
2025-07-23 14:55:18 | INFO | app | ✅ SQL validator initialized
2025-07-23 14:55:18 | INFO | app | ✅ Runpod SQL Retriever initialized successfully
2025-07-23 14:55:18 | INFO | app | ✅ Database connection verified: 1 rows
2025-07-23 14:55:21 | INFO | app | ✅ Embedding service connected
2025-07-23 14:55:31 | WARNING | app | ⚠️  LLM service connection failed: HTTPSConnectionPool(host='fake-url.com', port=443): Max retries exceeded with url: /v1/models (Caused by ConnectTimeoutError(<urllib3.connection.HTTPSConnection object at 0x7f153c5eddc0>, 'Connection to fake-url.com timed out. (connect timeout=10)'))
2025-07-23 14:55:31 | INFO | app | 🎉 SQL Retriever API ready with Runpod services!
2025-07-23 14:55:46 | INFO | app | Found 0 similar examples
2025-07-23 14:56:46 | ERROR | app | LLM service failed: LLM service timeout
2025-07-23 14:56:46 | ERROR | app | Query processing failed: Both LLM service and example retrieval failed: LLM service timeout
2025-07-23 14:56:46 | ERROR | app | Query processing error: 1 validation error for QueryResponse
results
  Input should be a valid dictionary [type=dict_type, input_value=[], input_type=list]
    For further information visit https://errors.pydantic.dev/2.11/v/dict_type
2025-07-23 14:57:31 | INFO | app | 🧹 Shutting down SQL Retriever API...
2025-07-23 14:57:31 | INFO | app | 👋 SQL Retriever API shut down complete
2025-07-23 14:57:31 | INFO | app | 🚀 Starting SQL Retriever API with Runpod services...
2025-07-23 14:57:31 | INFO | app | ✅ Database connection initialized
2025-07-23 14:57:31 | INFO | app | ✅ SQL validator initialized
2025-07-23 14:57:31 | INFO | app | ✅ Runpod SQL Retriever initialized successfully
2025-07-23 14:57:31 | INFO | app | ✅ Database connection verified: 1 rows
2025-07-23 14:57:34 | INFO | app | ✅ Embedding service connected
2025-07-23 14:57:44 | WARNING | app | ⚠️  LLM service connection failed: HTTPSConnectionPool(host='fake-url.com', port=443): Max retries exceeded with url: /v1/models (Caused by ConnectTimeoutError(<urllib3.connection.HTTPSConnection object at 0x7f7141af9790>, 'Connection to fake-url.com timed out. (connect timeout=10)'))
2025-07-23 14:57:44 | INFO | app | 🎉 SQL Retriever API ready with Runpod services!
2025-07-23 14:57:44 | INFO | app | 🚀 Starting SQL Retriever API with Runpod services...
2025-07-23 14:57:44 | INFO | app | ✅ Database connection initialized
2025-07-23 14:57:44 | INFO | app | ✅ SQL validator initialized
2025-07-23 14:57:44 | INFO | app | ✅ Runpod SQL Retriever initialized successfully
2025-07-23 14:57:44 | INFO | app | ✅ Database connection verified: 1 rows
2025-07-23 14:57:46 | INFO | app | ✅ Embedding service connected
2025-07-23 14:57:57 | WARNING | app | ⚠️  LLM service connection failed: HTTPSConnectionPool(host='fake-url.com', port=443): Max retries exceeded with url: /v1/models (Caused by ConnectTimeoutError(<urllib3.connection.HTTPSConnection object at 0x7ff7135f57c0>, 'Connection to fake-url.com timed out. (connect timeout=10)'))
2025-07-23 14:57:57 | INFO | app | 🎉 SQL Retriever API ready with Runpod services!
2025-07-23 14:57:57 | INFO | app | 🚀 Starting SQL Retriever API with Runpod services...
2025-07-23 14:57:57 | INFO | app | ✅ Database connection initialized
2025-07-23 14:57:57 | INFO | app | ✅ SQL validator initialized
2025-07-23 14:57:57 | INFO | app | ✅ Runpod SQL Retriever initialized successfully
2025-07-23 14:57:57 | INFO | app | ✅ Database connection verified: 1 rows
2025-07-23 14:58:00 | INFO | app | ✅ Embedding service connected
2025-07-23 14:58:10 | WARNING | app | ⚠️  LLM service connection failed: HTTPSConnectionPool(host='fake-url.com', port=443): Max retries exceeded with url: /v1/models (Caused by ConnectTimeoutError(<urllib3.connection.HTTPSConnection object at 0x7f79a19e99a0>, 'Connection to fake-url.com timed out. (connect timeout=10)'))
2025-07-23 14:58:10 | INFO | app | 🎉 SQL Retriever API ready with Runpod services!
2025-07-23 14:58:10 | INFO | app | 🚀 Starting SQL Retriever API with Runpod services...
2025-07-23 14:58:10 | INFO | app | ✅ Database connection initialized
2025-07-23 14:58:10 | INFO | app | ✅ SQL validator initialized
2025-07-23 14:58:10 | INFO | app | ✅ Runpod SQL Retriever initialized successfully
2025-07-23 14:58:10 | INFO | app | ✅ Database connection verified: 1 rows
2025-07-23 14:58:12 | INFO | app | ✅ Embedding service connected
2025-07-23 14:58:22 | WARNING | app | ⚠️  LLM service connection failed: HTTPSConnectionPool(host='fake-url.com', port=443): Max retries exceeded with url: /v1/models (Caused by ConnectTimeoutError(<urllib3.connection.HTTPSConnection object at 0x7f01fdde9850>, 'Connection to fake-url.com timed out. (connect timeout=10)'))
2025-07-23 14:58:22 | INFO | app | 🎉 SQL Retriever API ready with Runpod services!
2025-07-23 14:58:30 | INFO | app | Found 0 similar examples
2025-07-23 14:59:30 | ERROR | app | LLM service failed: LLM service timeout
2025-07-23 14:59:30 | ERROR | app | Query processing failed: Both LLM service and example retrieval failed: LLM service timeout
2025-07-23 15:00:16 | INFO | app | Found 0 similar examples
2025-07-23 15:01:16 | ERROR | app | LLM service failed: LLM service timeout
2025-07-23 15:01:16 | ERROR | app | Query processing failed: Both LLM service and example retrieval failed: LLM service timeout
2025-07-23 15:01:48 | INFO | app | 🧹 Shutting down SQL Retriever API...
2025-07-23 15:01:48 | INFO | app | 👋 SQL Retriever API shut down complete
2025-07-23 15:26:01 | INFO | app | 🚀 Starting SQL Retriever API with Runpod services...
2025-07-23 15:26:01 | INFO | app | ✅ Database connection initialized
2025-07-23 15:26:01 | INFO | app | ✅ SQL validator initialized
2025-07-23 15:26:01 | INFO | app | ✅ Runpod SQL Retriever initialized successfully
2025-07-23 15:26:01 | INFO | app | ✅ Database connection verified: 1 rows
2025-07-23 15:26:04 | INFO | app | ✅ Embedding service connected
2025-07-23 15:26:05 | INFO | app | ✅ LLM service connected
2025-07-23 15:26:05 | INFO | app | 🎉 SQL Retriever API ready with Runpod services!
2025-07-23 15:27:08 | INFO | app | Found 0 similar examples
2025-07-23 15:27:10 | ERROR | app | LLM service call failed: LLM service error: 404 - {"object":"error","message":"The model `llama-3.2-3b-instruct` does not exist.","type":"NotFoundError","param":null,"code":404}
2025-07-23 15:27:10 | ERROR | app | LLM service failed: LLM service error: 404 - {"object":"error","message":"The model `llama-3.2-3b-instruct` does not exist.","type":"NotFoundError","param":null,"code":404}
2025-07-23 15:27:10 | ERROR | app | Query processing failed: Both LLM service and example retrieval failed: LLM service error: 404 - {"object":"error","message":"The model `llama-3.2-3b-instruct` does not exist.","type":"NotFoundError","param":null,"code":404}
2025-07-23 15:27:56 | INFO | app | 🧹 Shutting down SQL Retriever API...
2025-07-23 15:27:56 | INFO | app | 👋 SQL Retriever API shut down complete
2025-07-23 15:27:57 | INFO | app | 🚀 Starting SQL Retriever API with Runpod services...
2025-07-23 15:27:57 | INFO | app | ✅ Database connection initialized
2025-07-23 15:27:57 | INFO | app | ✅ SQL validator initialized
2025-07-23 15:27:57 | INFO | app | ✅ Runpod SQL Retriever initialized successfully
2025-07-23 15:27:57 | INFO | app | ✅ Database connection verified: 1 rows
2025-07-23 15:27:59 | INFO | app | ✅ Embedding service connected
2025-07-23 15:28:00 | INFO | app | ✅ LLM service connected
2025-07-23 15:28:00 | INFO | app | 🎉 SQL Retriever API ready with Runpod services!
2025-07-23 15:28:08 | INFO | app | 🧹 Shutting down SQL Retriever API...
2025-07-23 15:28:08 | INFO | app | 👋 SQL Retriever API shut down complete
2025-07-23 15:28:09 | INFO | app | 🚀 Starting SQL Retriever API with Runpod services...
2025-07-23 15:28:09 | INFO | app | ✅ Database connection initialized
2025-07-23 15:28:09 | INFO | app | ✅ SQL validator initialized
2025-07-23 15:28:09 | INFO | app | ✅ Runpod SQL Retriever initialized successfully
2025-07-23 15:28:09 | INFO | app | ✅ Database connection verified: 1 rows
2025-07-23 15:28:11 | INFO | app | ✅ Embedding service connected
2025-07-23 15:28:13 | INFO | app | ✅ LLM service connected
2025-07-23 15:28:13 | INFO | app | 🎉 SQL Retriever API ready with Runpod services!
2025-07-23 15:28:14 | INFO | app | 🚀 Starting SQL Retriever API with Runpod services...
2025-07-23 15:28:14 | INFO | app | ✅ Database connection initialized
2025-07-23 15:28:14 | INFO | app | ✅ SQL validator initialized
2025-07-23 15:28:14 | INFO | app | ✅ Runpod SQL Retriever initialized successfully
2025-07-23 15:28:14 | INFO | app | ✅ Database connection verified: 1 rows
2025-07-23 15:28:16 | INFO | app | ✅ Embedding service connected
2025-07-23 15:28:17 | INFO | app | ✅ LLM service connected
2025-07-23 15:28:17 | INFO | app | 🎉 SQL Retriever API ready with Runpod services!
2025-07-23 15:28:38 | INFO | app | Found 0 similar examples
2025-07-23 15:28:39 | INFO | app | Generated SQL: SELECT * FROM customers;
2025-07-23 15:28:39 | ERROR | app | Error creating enhanced response: 'list' object has no attribute 'get'
2025-07-23 15:28:39 | ERROR | app | Query processing error: 1 validation error for QueryResponse
results
  Input should be a valid dictionary [type=dict_type, input_value=[{'customerNumber': 103, ...creditLimit': 123900.0}], input_type=list]
    For further information visit https://errors.pydantic.dev/2.11/v/dict_type
2025-07-23 15:29:34 | INFO | app | 🧹 Shutting down SQL Retriever API...
2025-07-23 15:29:34 | INFO | app | 👋 SQL Retriever API shut down complete
2025-07-23 15:29:35 | INFO | app | 🚀 Starting SQL Retriever API with Runpod services...
2025-07-23 15:29:35 | INFO | app | ✅ Database connection initialized
2025-07-23 15:29:35 | INFO | app | ✅ SQL validator initialized
2025-07-23 15:29:35 | INFO | app | ✅ Runpod SQL Retriever initialized successfully
2025-07-23 15:29:35 | INFO | app | ✅ Database connection verified: 1 rows
2025-07-23 15:29:37 | INFO | app | ✅ Embedding service connected
2025-07-23 15:29:38 | INFO | app | ✅ LLM service connected
2025-07-23 15:29:38 | INFO | app | 🎉 SQL Retriever API ready with Runpod services!
2025-07-23 15:29:39 | INFO | app | 🚀 Starting SQL Retriever API with Runpod services...
2025-07-23 15:29:39 | INFO | app | ✅ Database connection initialized
2025-07-23 15:29:39 | INFO | app | ✅ SQL validator initialized
2025-07-23 15:29:39 | INFO | app | ✅ Runpod SQL Retriever initialized successfully
2025-07-23 15:29:39 | INFO | app | ✅ Database connection verified: 1 rows
2025-07-23 15:29:41 | INFO | app | ✅ Embedding service connected
2025-07-23 15:29:42 | INFO | app | ✅ LLM service connected
2025-07-23 15:29:42 | INFO | app | 🎉 SQL Retriever API ready with Runpod services!
2025-07-23 15:29:52 | INFO | app | Found 0 similar examples
2025-07-23 15:29:53 | INFO | app | Generated SQL: SELECT * FROM customers;
2025-07-23 15:31:25 | INFO | app | Found 0 similar examples
2025-07-23 15:31:26 | INFO | app | Generated SQL: SELECT DISTINCT e.employeeNumber, e.firstName, e.lastName 
FROM employees e 
JOIN offices o ON e.officeCode = o.officeCode 
WHERE o.country = 'France';
2025-07-23 15:31:26 | INFO | app | SQL auto-corrected from: SELECT DISTINCT e.employeeNumber, e.firstName, e.lastName 
FROM employees e 
JOIN offices o ON e.officeCode = o.officeCode 
WHERE o.country = 'France';
2025-07-23 15:31:26 | INFO | app | SQL auto-corrected to: SELECT DISTINCT e.employeeNumber, e.firstName, e.lastName FROM employees e JOIN offices o ON e.officeCode = o.officeCode WHERE o.country = 'France';
2025-07-23 15:32:13 | INFO | app | 🧹 Shutting down SQL Retriever API...
2025-07-23 15:32:13 | INFO | app | 👋 SQL Retriever API shut down complete
2025-07-23 15:37:18 | INFO | app | 🚀 Starting SQL Retriever API with Runpod services...
2025-07-23 15:37:18 | INFO | app | ✅ Database connection initialized
2025-07-23 15:37:18 | INFO | app | ✅ SQL validator initialized
2025-07-23 15:37:18 | INFO | app | ✅ Runpod SQL Retriever initialized successfully
2025-07-23 15:37:18 | INFO | app | ✅ Database connection verified: 1 rows
2025-07-23 15:37:20 | INFO | app | ✅ Embedding service connected
2025-07-23 15:37:22 | INFO | app | ✅ LLM service connected
2025-07-23 15:37:22 | INFO | app | 🎉 SQL Retriever API ready with Runpod services!
2025-07-23 15:40:32 | INFO | app | 🧹 Shutting down SQL Retriever API...
2025-07-23 15:40:32 | INFO | app | 👋 SQL Retriever API shut down complete
2025-07-23 15:40:39 | INFO | app | 🚀 Starting SQL Retriever API with Runpod services...
2025-07-23 15:40:39 | INFO | app | ✅ Database connection initialized
2025-07-23 15:40:39 | INFO | app | ✅ SQL validator initialized
2025-07-23 15:40:39 | INFO | app | ✅ Runpod SQL Retriever initialized successfully
2025-07-23 15:40:39 | INFO | app | ✅ Database connection verified: 1 rows
2025-07-23 15:40:41 | INFO | app | ✅ Embedding service connected
2025-07-23 15:40:43 | INFO | app | ✅ LLM service connected
2025-07-23 15:40:43 | INFO | app | 🎉 SQL Retriever API ready with Runpod services!
2025-07-23 17:04:02 | INFO | app | 🧹 Shutting down SQL Retriever API...
2025-07-23 17:04:02 | INFO | app | 👋 SQL Retriever API shut down complete
